'use strict';

var _core = require('babel-runtime/core-js')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

require('mochawait');

var _should = require('should');

var _should2 = _interopRequireWildcard(_should);

var _mapify = require('es6-mapify');

var _import = require('lodash');

var _import2 = _interopRequireWildcard(_import);

var _createDevice$deleteDevice$eraseDevice$getDevices = require('../lib/simctl.js');

/* global it:true, describe:true*/
require('source-map-support').install();

describe('simctl', function () {
  var randNum = parseInt(Math.random() * 100, 10);
  var randName = 'device' + randNum;
  var randDeviceUdid = null;
  var validSdks = [];

  it('should create a device', function callee$1$0() {
    var devices, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _createDevice$deleteDevice$eraseDevice$getDevices.getDevices();

        case 2:
          devices = context$2$0.sent;

          validSdks = _import2['default'].keys(devices);

          if (validSdks.length) {
            context$2$0.next = 6;
            break;
          }

          throw new Error('No valid SDKs');

        case 6:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 9;
          _iterator = _core.getIterator(_mapify.mapify(devices).values());

        case 11:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$2$0.next = 18;
            break;
          }

          list = _step.value;

          if (!_import2['default'].contains(_import2['default'].pluck(list, 'name'), randName)) {
            context$2$0.next = 15;
            break;
          }

          throw new Error('Couldn\'t run test because device ' + randName + ' ' + 'already exists');

        case 15:
          _iteratorNormalCompletion = true;
          context$2$0.next = 11;
          break;

        case 18:
          context$2$0.next = 24;
          break;

        case 20:
          context$2$0.prev = 20;
          context$2$0.t3 = context$2$0['catch'](9);
          _didIteratorError = true;
          _iteratorError = context$2$0.t3;

        case 24:
          context$2$0.prev = 24;
          context$2$0.prev = 25;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 27:
          context$2$0.prev = 27;

          if (!_didIteratorError) {
            context$2$0.next = 30;
            break;
          }

          throw _iteratorError;

        case 30:
          return context$2$0.finish(27);

        case 31:
          return context$2$0.finish(24);

        case 32:
          context$2$0.next = 34;
          return _createDevice$deleteDevice$eraseDevice$getDevices.createDevice(randName, 'iPad Air', validSdks[0]);

        case 34:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[9, 20, 24, 32], [25,, 27, 31]]);
  });

  it('should get devices', function callee$1$1() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$1$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _createDevice$deleteDevice$eraseDevice$getDevices.getDevices(validSdks[0]);

        case 2:
          sdkDevices = context$2$0.sent;

          _import2['default'].pluck(sdkDevices, 'name').should.containEql(randName);
          randDeviceUdid = sdkDevices.filter(function (d) {
            return d.name === randName;
          })[0].udid;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should erase devices', function callee$1$2() {
    return _regeneratorRuntime.async(function callee$1$2$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _createDevice$deleteDevice$eraseDevice$getDevices.eraseDevice(randDeviceUdid);

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should delete devices', function callee$1$3() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$3$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _createDevice$deleteDevice$eraseDevice$getDevices.deleteDevice(randDeviceUdid);

        case 2:
          context$2$0.next = 4;
          return _createDevice$deleteDevice$eraseDevice$getDevices.getDevices(validSdks[0]);

        case 4:
          sdkDevices = context$2$0.sent;

          _import2['default'].pluck(sdkDevices, 'name').should.not.containEql(randName);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should return a nice error for invalid usage', function callee$1$4() {
    var err;
    return _regeneratorRuntime.async(function callee$1$4$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _createDevice$deleteDevice$eraseDevice$getDevices.createDevice('foo', 'bar', 'baz');

        case 4:
          context$2$0.next = 9;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t4 = context$2$0['catch'](1);

          err = context$2$0.t4;

        case 9:
          _should2['default'].exist(err);
          err.message.should.containEql('Invalid device type: bar');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 6]]);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2ltY3RsLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7UUFHTyxXQUFXOztzQkFDQyxRQUFROzs7O3NCQUNKLFlBQVk7O3NCQUNyQixRQUFROzs7O2dFQUM4QyxrQkFBa0I7OztBQU50RixPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFReEMsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0FBQ3ZCLE1BQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELE1BQUksUUFBUSxjQUFZLE9BQU8sQUFBRSxDQUFDO0FBQ2xDLE1BQUksY0FBYyxHQUFHLElBQUksQ0FBQztBQUMxQixNQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7O0FBRW5CLElBQUUsQ0FBQyx3QkFBd0IsRUFBRTtRQUN2QixPQUFPLGtGQUtGLElBQUk7Ozs7OztpQkFMTyxrREFUMEIsVUFBVSxFQVN4Qjs7O0FBQTVCLGlCQUFPOztBQUNYLG1CQUFTLEdBQUcsb0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztjQUN2QixTQUFTLENBQUMsTUFBTTs7Ozs7Z0JBQ2IsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDOzs7Ozs7O3dDQUVqQixRQWhCWixNQUFNLENBZ0JhLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRTs7Ozs7Ozs7QUFBaEMsY0FBSTs7ZUFDUCxvQkFBRSxRQUFRLENBQUMsb0JBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxRQUFRLENBQUM7Ozs7O2dCQUN2QyxJQUFJLEtBQUssQ0FBQyx1Q0FBb0MsUUFBUSx5QkFDNUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpQkFHL0Isa0RBcEJELFlBQVksQ0FvQkUsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7R0FDdkQsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxvQkFBb0IsRUFBRTtRQUNuQixVQUFVOzs7OztpQkFBUyxrREF4QnVCLFVBQVUsQ0F3QnRCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBQTNDLG9CQUFVOztBQUNkLDhCQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCx3QkFBYyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDO21CQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUTtXQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7R0FDeEUsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxzQkFBc0IsRUFBRTs7Ozs7aUJBQ25CLGtEQTlCMkIsV0FBVyxDQThCMUIsY0FBYyxDQUFDOzs7Ozs7O0dBQ2xDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsdUJBQXVCLEVBQUU7UUFFdEIsVUFBVTs7Ozs7aUJBRFIsa0RBbENhLFlBQVksQ0FrQ1osY0FBYyxDQUFDOzs7O2lCQUNYLGtEQW5DdUIsVUFBVSxDQW1DdEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFBM0Msb0JBQVU7O0FBQ2QsOEJBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7OztHQUM3RCxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDhDQUE4QyxFQUFFO1FBQzdDLEdBQUc7Ozs7QUFBSCxhQUFHLEdBQUcsSUFBSTs7O2lCQUVOLGtEQTFDSCxZQUFZLENBMENJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDOzs7Ozs7Ozs7O0FBRXZDLGFBQUcsaUJBQUksQ0FBQzs7O0FBRVYsOEJBQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLGFBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDOzs7Ozs7O0dBQzNELENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3NpbWN0bC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBpdDp0cnVlLCBkZXNjcmliZTp0cnVlKi9cbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcblxuaW1wb3J0ICdtb2NoYXdhaXQnO1xuaW1wb3J0IHNob3VsZCBmcm9tICdzaG91bGQnO1xuaW1wb3J0IHsgbWFwaWZ5IH0gZnJvbSAnZXM2LW1hcGlmeSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgY3JlYXRlRGV2aWNlLCBkZWxldGVEZXZpY2UsIGVyYXNlRGV2aWNlLCBnZXREZXZpY2VzIH0gZnJvbSAnLi4vbGliL3NpbWN0bC5qcyc7XG5cbmRlc2NyaWJlKCdzaW1jdGwnLCAoKSA9PiB7XG4gIGxldCByYW5kTnVtID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDEwMCwgMTApO1xuICBsZXQgcmFuZE5hbWUgPSBgZGV2aWNlJHtyYW5kTnVtfWA7XG4gIGxldCByYW5kRGV2aWNlVWRpZCA9IG51bGw7XG4gIGxldCB2YWxpZFNka3MgPSBbXTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGRldmljZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMoKTtcbiAgICB2YWxpZFNka3MgPSBfLmtleXMoZGV2aWNlcyk7XG4gICAgaWYgKCF2YWxpZFNka3MubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWxpZCBTREtzXCIpO1xuICAgIH1cbiAgICBmb3IgKGxldCBsaXN0IG9mIG1hcGlmeShkZXZpY2VzKS52YWx1ZXMoKSkge1xuICAgICAgaWYgKF8uY29udGFpbnMoXy5wbHVjayhsaXN0LCAnbmFtZScpLCByYW5kTmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBydW4gdGVzdCBiZWNhdXNlIGRldmljZSAke3JhbmROYW1lfSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBhbHJlYWR5IGV4aXN0c2ApO1xuICAgICAgfVxuICAgIH1cbiAgICBhd2FpdCBjcmVhdGVEZXZpY2UocmFuZE5hbWUsICdpUGFkIEFpcicsIHZhbGlkU2Rrc1swXSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IGRldmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHNka0RldmljZXMgPSBhd2FpdCBnZXREZXZpY2VzKHZhbGlkU2Rrc1swXSk7XG4gICAgXy5wbHVjayhzZGtEZXZpY2VzLCAnbmFtZScpLnNob3VsZC5jb250YWluRXFsKHJhbmROYW1lKTtcbiAgICByYW5kRGV2aWNlVWRpZCA9IHNka0RldmljZXMuZmlsdGVyKChkKSA9PiBkLm5hbWUgPT09IHJhbmROYW1lKVswXS51ZGlkO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVyYXNlIGRldmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZXJhc2VEZXZpY2UocmFuZERldmljZVVkaWQpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlbGV0ZSBkZXZpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRlbGV0ZURldmljZShyYW5kRGV2aWNlVWRpZCk7XG4gICAgbGV0IHNka0RldmljZXMgPSBhd2FpdCBnZXREZXZpY2VzKHZhbGlkU2Rrc1swXSk7XG4gICAgXy5wbHVjayhzZGtEZXZpY2VzLCAnbmFtZScpLnNob3VsZC5ub3QuY29udGFpbkVxbChyYW5kTmFtZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGEgbmljZSBlcnJvciBmb3IgaW52YWxpZCB1c2FnZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZXJyID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY3JlYXRlRGV2aWNlKCdmb28nLCAnYmFyJywgJ2JheicpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVyciA9IGU7XG4gICAgfVxuICAgIHNob3VsZC5leGlzdChlcnIpO1xuICAgIGVyci5tZXNzYWdlLnNob3VsZC5jb250YWluRXFsKCdJbnZhbGlkIGRldmljZSB0eXBlOiBiYXInKTtcbiAgfSk7XG5cbn0pO1xuIl19