'use strict';

var _core = require('babel-runtime/core-js')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

_core.Object.defineProperty(exports, '__esModule', {
  value: true
});

var _Q = require('q');

var _Q2 = _interopRequireWildcard(_Q);

var _cp = require('child_process');

var _cp2 = _interopRequireWildcard(_cp);

var _sleep$retry$nodeifyAll = require('asyncbox');

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireWildcard(_npmlog);

var _mapify = require('es6-mapify');

var log = global._global_npmlog || _npmlog2['default'];

function simExec(cmd, timeout) {
  var args = arguments[2] === undefined ? [] : arguments[2];

  args = args.map(function (arg) {
    if (arg.indexOf(' ') !== -1) {
      return '"' + arg + '"';
    }
    return arg;
  });
  cmd = 'xcrun simctl ' + cmd + ' ' + args.join(' ');
  log.info('Executing: ' + cmd + ' with timeout ' + timeout);
  return _Q2['default'].nfcall(_cp2['default'].exec, cmd, { timeout: timeout });
}

function createDevice(name, deviceTypeId, runtimeId) {
  return _regeneratorRuntime.async(function createDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return simExec('create', 0, [name, deviceTypeId, runtimeId]);

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function deleteDevice(udid) {
  return _regeneratorRuntime.async(function deleteDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return simExec('delete', 0, [udid]);

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function eraseDevice(udid) {
  var cmdTimeout, cmdRetry, loopFn;
  return _regeneratorRuntime.async(function eraseDevice$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        cmdTimeout = 2000, cmdRetry = 5;

        loopFn = function loopFn() {
          var ms;
          return _regeneratorRuntime.async(function loopFn$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                ms = _core.Date.now();
                context$2$0.prev = 1;
                context$2$0.next = 4;
                return simExec('erase', cmdTimeout, [udid]);

              case 4:
                context$2$0.next = 11;
                break;

              case 6:
                context$2$0.prev = 6;
                context$2$0.t0 = context$2$0['catch'](1);
                context$2$0.next = 10;
                return _sleep$retry$nodeifyAll.sleep(Math.max(cmdTimeout - (_core.Date.now() - ms), 1));

              case 10:
                throw context$2$0.t0;

              case 11:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[1, 6]]);
        };

        context$1$0.next = 4;
        return _sleep$retry$nodeifyAll.retry(cmdRetry, loopFn);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getDevices() {
  var forSdk = arguments[0] === undefined ? null : arguments[0];

  var res, stdout, deviceSecRe, matches, devices, match, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, sdk, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, line, lineRe, lineMatch, device;

  return _regeneratorRuntime.async(function getDevices$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return simExec('list', 0, ['devices']);

      case 2:
        res = context$1$0.sent;
        stdout = res[0];
        deviceSecRe = /-- iOS (.+) --(\n    .+)*/mg;
        matches = [];
        devices = {};
        match = deviceSecRe.exec(stdout);

        while (match !== null) {
          matches.push(match);
          match = deviceSecRe.exec(stdout);
        }

        if (!(matches.length < 1)) {
          context$1$0.next = 11;
          break;
        }

        throw new Error('Could not find device section');

      case 11:
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 14;
        _iterator = _core.getIterator(matches);

      case 16:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 56;
          break;
        }

        match = _step.value;
        sdk = match[1];

        devices[sdk] = [];
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 23;
        _iterator2 = _core.getIterator(match[0].split('\n').slice(1));

      case 25:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 39;
          break;
        }

        line = _step2.value;
        lineRe = /^    ([^\(]+) \(([^\)]+)\) \(([^\)]+)\)/;
        lineMatch = lineRe.exec(line);

        if (!(lineMatch === null)) {
          context$1$0.next = 31;
          break;
        }

        throw new Error('Couldn\'t match line');

      case 31:
        device = {};

        device.name = lineMatch[1];
        device.udid = lineMatch[2];
        device.state = lineMatch[3];
        devices[sdk].push(device);

      case 36:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 25;
        break;

      case 39:
        context$1$0.next = 45;
        break;

      case 41:
        context$1$0.prev = 41;
        context$1$0.t1 = context$1$0['catch'](23);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t1;

      case 45:
        context$1$0.prev = 45;
        context$1$0.prev = 46;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 48:
        context$1$0.prev = 48;

        if (!_didIteratorError2) {
          context$1$0.next = 51;
          break;
        }

        throw _iteratorError2;

      case 51:
        return context$1$0.finish(48);

      case 52:
        return context$1$0.finish(45);

      case 53:
        _iteratorNormalCompletion = true;
        context$1$0.next = 16;
        break;

      case 56:
        context$1$0.next = 62;
        break;

      case 58:
        context$1$0.prev = 58;
        context$1$0.t2 = context$1$0['catch'](14);
        _didIteratorError = true;
        _iteratorError = context$1$0.t2;

      case 62:
        context$1$0.prev = 62;
        context$1$0.prev = 63;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 65:
        context$1$0.prev = 65;

        if (!_didIteratorError) {
          context$1$0.next = 68;
          break;
        }

        throw _iteratorError;

      case 68:
        return context$1$0.finish(65);

      case 69:
        return context$1$0.finish(62);

      case 70:
        if (!forSdk) {
          context$1$0.next = 74;
          break;
        }

        if (devices[forSdk]) {
          context$1$0.next = 73;
          break;
        }

        throw new Error('Sdk ' + forSdk + ' was not in list of simctl sdks');

      case 73:
        return context$1$0.abrupt('return', devices[forSdk]);

      case 74:
        return context$1$0.abrupt('return', devices);

      case 75:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[14, 58, 62, 70], [23, 41, 45, 53], [46,, 48, 52], [63,, 65, 69]]);
}

exports.createDevice = createDevice;
exports.deleteDevice = deleteDevice;
exports.eraseDevice = eraseDevice;
exports.getDevices = getDevices;

// retry erase with a sleep in between because it's flakey
//# sourceMappingURL=data:application/json;base64,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QUFDOzs7NENBRS9ELE9BQU8sQ0FBQyxNQUFNLENBQUM7Ozs0Q0FFakIsT0FBTzs7Ozs7OztDQUNmOztRQUVRLFlBQVksR0FBWixZQUFZO1FBQUUsWUFBWSxHQUFaLFlBQVk7UUFBRSxXQUFXLEdBQVgsV0FBVztRQUFFLFVBQVUsR0FBVixVQUFVIiwiZmlsZSI6ImxpYi9zaW1jdGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUSBmcm9tICdxJztcbmltcG9ydCBjcCBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IHNsZWVwLCByZXRyeSwgbm9kZWlmeUFsbCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBucG1sb2cgZnJvbSAnbnBtbG9nJztcbmltcG9ydCB7IG1hcGlmeSB9IGZyb20gJ2VzNi1tYXBpZnknO1xuXG5sZXQgbG9nID0gZ2xvYmFsLl9nbG9iYWxfbnBtbG9nIHx8IG5wbWxvZztcblxuZnVuY3Rpb24gc2ltRXhlYyAoY21kOnN0cmluZywgdGltZW91dDpudW1iZXIsIGFyZ3M6QXJyYXkgPSBbXSkge1xuICBhcmdzID0gYXJncy5tYXAoKGFyZykgPT4ge1xuICAgIGlmIChhcmcuaW5kZXhPZihcIiBcIikgIT09IC0xKSB7XG4gICAgICByZXR1cm4gJ1wiJyArIGFyZyArICdcIic7XG4gICAgfVxuICAgIHJldHVybiBhcmc7XG4gIH0pO1xuICBjbWQgPSBcInhjcnVuIHNpbWN0bCBcIiArIGNtZCArIFwiIFwiICsgYXJncy5qb2luKCcgJyk7XG4gIGxvZy5pbmZvKFwiRXhlY3V0aW5nOiBcIiArIGNtZCArIFwiIHdpdGggdGltZW91dCBcIiArIHRpbWVvdXQpO1xuICByZXR1cm4gUS5uZmNhbGwoY3AuZXhlYywgY21kLCB7dGltZW91dH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVEZXZpY2UgKG5hbWU6c3RyaW5nLCBkZXZpY2VUeXBlSWQ6c3RyaW5nLFxuICAgIHJ1bnRpbWVJZDpzdHJpbmcpOnZvaWQge1xuICBhd2FpdCBzaW1FeGVjKFwiY3JlYXRlXCIsIDAsIFtuYW1lLCBkZXZpY2VUeXBlSWQsIHJ1bnRpbWVJZF0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVEZXZpY2UgKHVkaWQ6c3RyaW5nKTp2b2lkIHtcbiAgYXdhaXQgc2ltRXhlYyhcImRlbGV0ZVwiLCAwLCBbdWRpZF0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBlcmFzZURldmljZSAodWRpZDpzdHJpbmcpOnZvaWQge1xuICBsZXQgY21kVGltZW91dDpudW1iZXIgPSAyMDAwLCBjbWRSZXRyeTpudW1iZXIgPSA1O1xuICBsZXQgbG9vcEZuOkZ1bmN0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCBtcyA9IERhdGUubm93KCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHNpbUV4ZWMoXCJlcmFzZVwiLCBjbWRUaW1lb3V0LCBbdWRpZF0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGF3YWl0IHNsZWVwKE1hdGgubWF4KGNtZFRpbWVvdXQgLSAoRGF0ZS5ub3coKSAtIG1zKSwgMSkpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG4gIC8vIHJldHJ5IGVyYXNlIHdpdGggYSBzbGVlcCBpbiBiZXR3ZWVuIGJlY2F1c2UgaXQncyBmbGFrZXlcbiAgYXdhaXQgcmV0cnkoY21kUmV0cnksIGxvb3BGbik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERldmljZXMgKGZvclNkazpzdHJpbmcgPSBudWxsKTpPYmplY3Qge1xuICBsZXQgcmVzOkFycmF5ID0gYXdhaXQgc2ltRXhlYyhcImxpc3RcIiwgMCwgW1wiZGV2aWNlc1wiXSk7XG4gIGxldCBzdGRvdXQ6c3RyaW5nID0gcmVzWzBdO1xuICBsZXQgZGV2aWNlU2VjUmU6UmVnRXhwID0gLy0tIGlPUyAoLispIC0tKFxcbiAgICAuKykqL21nO1xuICBsZXQgbWF0Y2hlczpBcnJheSA9IFtdO1xuICBsZXQgZGV2aWNlczpPYmplY3QgPSB7fTtcbiAgbGV0IG1hdGNoOk9iamVjdCA9IGRldmljZVNlY1JlLmV4ZWMoc3Rkb3V0KTtcbiAgd2hpbGUgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgbWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICBtYXRjaCA9IGRldmljZVNlY1JlLmV4ZWMoc3Rkb3V0KTtcbiAgfVxuICBpZiAobWF0Y2hlcy5sZW5ndGggPCAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgZGV2aWNlIHNlY3Rpb25cIik7XG4gIH1cbiAgZm9yIChtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IHNkazpzdHJpbmcgPSBtYXRjaFsxXTtcbiAgICBkZXZpY2VzW3Nka10gPSBbXTtcbiAgICBmb3IgKGxldCBsaW5lOnN0cmluZyBvZiBtYXRjaFswXS5zcGxpdChcIlxcblwiKS5zbGljZSgxKSkge1xuICAgICAgbGV0IGxpbmVSZTpSZWdFeHAgPSAvXiAgICAoW15cXChdKykgXFwoKFteXFwpXSspXFwpIFxcKChbXlxcKV0rKVxcKS87XG4gICAgICBsZXQgbGluZU1hdGNoOk9iamVjdCA9IGxpbmVSZS5leGVjKGxpbmUpO1xuICAgICAgaWYgKGxpbmVNYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBtYXRjaCBsaW5lXCIpO1xuICAgICAgfVxuICAgICAgbGV0IGRldmljZTpPYmplY3QgPSB7fTtcbiAgICAgIGRldmljZS5uYW1lID0gbGluZU1hdGNoWzFdO1xuICAgICAgZGV2aWNlLnVkaWQgPSBsaW5lTWF0Y2hbMl07XG4gICAgICBkZXZpY2Uuc3RhdGUgPSBsaW5lTWF0Y2hbM107XG4gICAgICBkZXZpY2VzW3Nka10ucHVzaChkZXZpY2UpO1xuICAgIH1cbiAgfVxuICBpZiAoZm9yU2RrKSB7XG4gICAgaWYgKCFkZXZpY2VzW2ZvclNka10pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNkayBcIiArIGZvclNkayArIFwiIHdhcyBub3QgaW4gbGlzdCBvZiBzaW1jdGwgc2Rrc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGRldmljZXNbZm9yU2RrXTtcbiAgfVxuICByZXR1cm4gZGV2aWNlcztcbn1cblxuZXhwb3J0IHsgY3JlYXRlRGV2aWNlLCBkZWxldGVEZXZpY2UsIGVyYXNlRGV2aWNlLCBnZXREZXZpY2VzIH07XG4iXX0=