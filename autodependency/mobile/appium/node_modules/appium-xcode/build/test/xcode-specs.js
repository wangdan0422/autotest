'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _import = require('../lib/xcode');

var xcode = _interopRequireWildcard(_import);

var _chai = require('chai');

var _chai2 = _interopRequireWildcard(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireWildcard(_chaiAsPromised);

require('mochawait');

var _fs = require('fs');

var _fs2 = _interopRequireWildcard(_fs);

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireWildcard(_denodeify);

var _import2 = require('lodash');

var _import3 = _interopRequireWildcard(_import2);

require('source-map-support').install();

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var fileExists = _denodeify2['default'](_fs2['default'].stat);

describe('xcode @skip-linux', function () {

  it('should get the path to xcode executable', function callee$1$0() {
    var path;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return xcode.getPath();

        case 2:
          path = context$2$0.sent;

          should.exist(path);
          context$2$0.next = 6;
          return fileExists(path);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should get the version of xcode', function callee$1$1() {
    var version;
    return _regeneratorRuntime.async(function callee$1$1$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return xcode.getVersion();

        case 2:
          version = context$2$0.sent;

          should.exist(version);
          _import3['default'].isString(version).should.be['true'];
          /\d\.\d\.*\d*/.test(version).should.be['true'];

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should get the path and version again, these values are cached', function callee$1$2() {
    var before, path, after, version;
    return _regeneratorRuntime.async(function callee$1$2$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return xcode.getPath();

        case 2:
          context$2$0.next = 4;
          return xcode.getVersion();

        case 4:
          before = new Date();
          context$2$0.next = 7;
          return xcode.getPath();

        case 7:
          path = context$2$0.sent;
          after = new Date();

          should.exist(path);
          context$2$0.next = 12;
          return fileExists(path);

        case 12:
          (after - before).should.be.at.most(2);

          before = new Date();
          context$2$0.next = 16;
          return xcode.getVersion();

        case 16:
          version = context$2$0.sent;

          after = new Date();

          should.exist(version);
          _import3['default'].isString(version).should.be['true'];
          /\d\.\d\.*\d*/.test(version).should.be['true'];
          (after - before).should.be.at.most(2);

        case 22:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should clear the cache if asked to', function callee$1$3() {
    var before, after;
    return _regeneratorRuntime.async(function callee$1$3$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:

          xcode.clearInternalCache();

          before = new Date();
          context$2$0.next = 4;
          return xcode.getPath();

        case 4:
          after = new Date();

          (after - before).should.be.at.least(7);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should find the automation trace template', function callee$1$4() {
    var path, suffix;
    return _regeneratorRuntime.async(function callee$1$4$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return xcode.getAutomationTraceTemplatePath();

        case 2:
          path = context$2$0.sent;

          should.exist(path);
          fileExists(path).should.eventually.be['true'];
          suffix = '.tracetemplate';

          path.slice(-suffix.length).should.equal(suffix);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get max iOS SDK version', function callee$1$5() {
    var version;
    return _regeneratorRuntime.async(function callee$1$5$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return xcode.getMaxIOSSDK();

        case 2:
          version = context$2$0.sent;

          should.exist(version);
          (typeof version).should.equal('string');
          (parseFloat(version) - 6.1).should.be.at.least(0);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get a list of iOS devices', function callee$1$6() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$6$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return xcode.getConnectedDevices();

        case 2:
          devices = context$2$0.sent;

          should.exist(devices);
          (typeof devices).should.equal('object');

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,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LE9BQU8sQ0FBQyxDQUFDO0FBQ3RCLFdBQUMsT0FBTyxPQUFPLENBQUEsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs7Ozs7O0dBQ3pDLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3hjb2RlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xuXG5pbXBvcnQgKiBhcyB4Y29kZSBmcm9tICcuLi9saWIveGNvZGUnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgJ21vY2hhd2FpdCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGRlbm9kZWlmeSBmcm9tICdkZW5vZGVpZnknO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxubGV0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmxldCBmaWxlRXhpc3RzID0gZGVub2RlaWZ5KGZzLnN0YXQpO1xuXG5kZXNjcmliZSgneGNvZGUgQHNraXAtbGludXgnLCAoKSA9PiB7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgdGhlIHBhdGggdG8geGNvZGUgZXhlY3V0YWJsZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICAgIGxldCBwYXRoID0gYXdhaXQgeGNvZGUuZ2V0UGF0aCgpO1xuICAgIHNob3VsZC5leGlzdChwYXRoKTtcbiAgICBhd2FpdCBmaWxlRXhpc3RzKHBhdGgpO1xuXG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IHRoZSB2ZXJzaW9uIG9mIHhjb2RlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gICAgbGV0IHZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKCk7XG4gICAgc2hvdWxkLmV4aXN0KHZlcnNpb24pO1xuICAgIF8uaXNTdHJpbmcodmVyc2lvbikuc2hvdWxkLmJlLnRydWU7XG4gICAgL1xcZFxcLlxcZFxcLipcXGQqLy50ZXN0KHZlcnNpb24pLnNob3VsZC5iZS50cnVlO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCB0aGUgcGF0aCBhbmQgdmVyc2lvbiBhZ2FpbiwgdGhlc2UgdmFsdWVzIGFyZSBjYWNoZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICBhd2FpdCB4Y29kZS5nZXRQYXRoKCk7XG4gICAgYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbigpO1xuXG4gICAgbGV0IGJlZm9yZSA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IHBhdGggPSBhd2FpdCB4Y29kZS5nZXRQYXRoKCk7XG4gICAgbGV0IGFmdGVyID0gbmV3IERhdGUoKTtcblxuICAgIHNob3VsZC5leGlzdChwYXRoKTtcbiAgICBhd2FpdCBmaWxlRXhpc3RzKHBhdGgpO1xuICAgIChhZnRlci1iZWZvcmUpLnNob3VsZC5iZS5hdC5tb3N0KDIpO1xuXG4gICAgYmVmb3JlID0gbmV3IERhdGUoKTtcbiAgICBsZXQgdmVyc2lvbiA9IGF3YWl0IHhjb2RlLmdldFZlcnNpb24oKTtcbiAgICBhZnRlciA9IG5ldyBEYXRlKCk7XG5cbiAgICBzaG91bGQuZXhpc3QodmVyc2lvbik7XG4gICAgXy5pc1N0cmluZyh2ZXJzaW9uKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAvXFxkXFwuXFxkXFwuKlxcZCovLnRlc3QodmVyc2lvbikuc2hvdWxkLmJlLnRydWU7XG4gICAgKGFmdGVyLWJlZm9yZSkuc2hvdWxkLmJlLmF0Lm1vc3QoMik7XG5cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjbGVhciB0aGUgY2FjaGUgaWYgYXNrZWQgdG8nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICB4Y29kZS5jbGVhckludGVybmFsQ2FjaGUoKTtcblxuICAgIGxldCBiZWZvcmUgPSBuZXcgRGF0ZSgpO1xuICAgIGF3YWl0IHhjb2RlLmdldFBhdGgoKTtcbiAgICBsZXQgYWZ0ZXIgPSBuZXcgRGF0ZSgpO1xuICAgIChhZnRlci1iZWZvcmUpLnNob3VsZC5iZS5hdC5sZWFzdCg3KTtcblxuICB9KTtcblxuICBpdCgnc2hvdWxkIGZpbmQgdGhlIGF1dG9tYXRpb24gdHJhY2UgdGVtcGxhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHBhdGggPSBhd2FpdCB4Y29kZS5nZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGgoKTtcblxuICAgIHNob3VsZC5leGlzdChwYXRoKTtcbiAgICBmaWxlRXhpc3RzKHBhdGgpLnNob3VsZC5ldmVudHVhbGx5LmJlLnRydWU7XG4gICAgbGV0IHN1ZmZpeCA9IFwiLnRyYWNldGVtcGxhdGVcIjtcbiAgICBwYXRoLnNsaWNlKC1zdWZmaXgubGVuZ3RoKS5zaG91bGQuZXF1YWwoc3VmZml4KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgbWF4IGlPUyBTREsgdmVyc2lvbicsIGFzeW5jKCkgPT4ge1xuICAgIGxldCB2ZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0TWF4SU9TU0RLKCk7XG5cbiAgICBzaG91bGQuZXhpc3QodmVyc2lvbik7XG4gICAgKHR5cGVvZiB2ZXJzaW9uKS5zaG91bGQuZXF1YWwoJ3N0cmluZycpO1xuICAgIChwYXJzZUZsb2F0KHZlcnNpb24pLTYuMSkuc2hvdWxkLmJlLmF0LmxlYXN0KDApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBhIGxpc3Qgb2YgaU9TIGRldmljZXMnLCBhc3luYygpID0+IHtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IHhjb2RlLmdldENvbm5lY3RlZERldmljZXMoKTtcbiAgICBzaG91bGQuZXhpc3QoZGV2aWNlcyk7XG4gICAgKHR5cGVvZiBkZXZpY2VzKS5zaG91bGQuZXF1YWwoJ29iamVjdCcpO1xuICB9KTtcblxufSk7XG4iXX0=