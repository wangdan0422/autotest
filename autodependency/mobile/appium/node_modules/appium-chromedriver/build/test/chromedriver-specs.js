'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _Chromedriver = require('../..');

var _Chromedriver2 = _interopRequireWildcard(_Chromedriver);

var _chai = require('chai');

var _chai2 = _interopRequireWildcard(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireWildcard(_chaiAsPromised);

var _Q = require('q');

var _Q2 = _interopRequireWildcard(_Q);

var _psNode = require('ps-node');

var _psNode2 = _interopRequireWildcard(_psNode);

require('mochawait');

require('source-map-support').install();

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function nextState(cd) {
  var d = _Q2['default'].defer();
  cd.on(_Chromedriver2['default'].EVENT_CHANGED, function (msg) {
    d.resolve(msg.state);
  });
  return d.promise;
}

function nextError(cd) {
  var d = _Q2['default'].defer();
  cd.on(_Chromedriver2['default'].EVENT_ERROR, function (err) {
    d.resolve(err);
  });
  return d.promise;
}

function assertNoRunningChromedrivers() {
  var res;
  return _regeneratorRuntime.async(function assertNoRunningChromedrivers$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _Q2['default'].nfcall(_psNode2['default'].lookup, { command: 'chromedriver' });

      case 2:
        res = context$1$0.sent;

        res.should.have.length(0);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

describe('chromedriver with EventEmitter', function () {
  var cd = null;
  var caps = { browserName: 'chrome' };
  before(function callee$1$0() {
    var opts;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          opts = {};

          cd = new _Chromedriver2['default'](opts);

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start a session', function callee$1$1() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$1$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql('stopped');
          nextStatePromise = nextState(cd);

          cd.start(caps);
          cd.capabilities.should.eql(caps);
          context$2$0.next = 6;
          return nextStatePromise.should.become(_Chromedriver2['default'].STATE_STARTING);

        case 6:
          context$2$0.next = 8;
          return nextState(cd).should.become(_Chromedriver2['default'].STATE_ONLINE);

        case 8:
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should run some commands', function callee$1$2() {
    var res;
    return _regeneratorRuntime.async(function callee$1$2$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return cd.sendCommand('/url', 'POST', { url: 'http://google.com' });

        case 2:
          res = context$2$0.sent;

          should.not.exist(res);
          context$2$0.next = 6;
          return cd.sendCommand('/url', 'GET');

        case 6:
          res = context$2$0.sent;

          res.should.contain('google');

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should say whether there is a working webview', function callee$1$3() {
    var res;
    return _regeneratorRuntime.async(function callee$1$3$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return cd.hasWorkingWebview();

        case 2:
          res = context$2$0.sent;

          res.should.equal(true);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should restart a session', function callee$1$4() {
    var p1;
    return _regeneratorRuntime.async(function callee$1$4$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          p1 = nextState(cd);

          cd.restart();
          context$2$0.next = 4;
          return p1.should.become(_Chromedriver2['default'].STATE_STOPPING);

        case 4:
          context$2$0.next = 6;
          return nextState(cd).should.become(_Chromedriver2['default'].STATE_STOPPED);

        case 6:
          context$2$0.next = 8;
          return nextState(cd).should.become(_Chromedriver2['default'].STATE_ONLINE);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should stop a session', function callee$1$5() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$5$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          nextStatePromise = nextState(cd);

          cd.stop();
          context$2$0.next = 4;
          return nextStatePromise.should.become(_Chromedriver2['default'].STATE_STOPPING);

        case 4:
          should.not.exist(cd.sessionId());
          context$2$0.next = 7;
          return nextState(cd).should.become(_Chromedriver2['default'].STATE_STOPPED);

        case 7:
          should.not.exist(cd.sessionId());
          context$2$0.next = 10;
          return assertNoRunningChromedrivers();

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it.skip('should change state to stopped if chromedriver crashes', function callee$1$6() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$6$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          // test works but is skipped because it leaves a chrome window orphaned
          // and I can't figure out a way to safely kill only that one
          cd.state.should.eql(_Chromedriver2['default'].STATE_STOPPED);
          nextStatePromise = nextState(cd);

          cd.start(caps);
          cd.capabilities.should.eql(caps);
          context$2$0.next = 6;
          return nextStatePromise.should.become(_Chromedriver2['default'].STATE_STARTING);

        case 6:
          context$2$0.next = 8;
          return nextState(cd).should.become(_Chromedriver2['default'].STATE_ONLINE);

        case 8:
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());
          nextStatePromise = nextState(cd);
          context$2$0.next = 13;
          return cd.killAll();

        case 13:
          context$2$0.next = 15;
          return nextStatePromise.should.become(_Chromedriver2['default'].STATE_STOPPED);

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should throw an error when chromedriver doesnt exist', function callee$1$7() {
    var cd2, nextErrP, err;
    return _regeneratorRuntime.async(function callee$1$7$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd2 = new _Chromedriver2['default']({ executable: '/does/not/exist' });
          nextErrP = nextError(cd2);

          cd2.start({});
          context$2$0.next = 5;
          return nextErrP;

        case 5:
          err = context$2$0.sent;

          err.message.should.contain('ENOENT');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('chromedriver with asyncawait', function () {
  var cd = null;
  var caps = { browserName: 'chrome' };
  before(function callee$1$0() {
    var opts;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          opts = {};

          cd = new _Chromedriver2['default'](opts);

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start a session', function callee$1$1() {
    return _regeneratorRuntime.async(function callee$1$1$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql('stopped');
          should.not.exist(cd.sessionId());
          context$2$0.next = 4;
          return cd.start(caps);

        case 4:
          cd.capabilities.should.eql(caps);
          cd.state.should.eql(_Chromedriver2['default'].STATE_ONLINE);
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should restart a session', function callee$1$2() {
    return _regeneratorRuntime.async(function callee$1$2$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql(_Chromedriver2['default'].STATE_ONLINE);
          context$2$0.next = 3;
          return cd.restart();

        case 3:
          cd.state.should.eql(_Chromedriver2['default'].STATE_ONLINE);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should stop a session', function callee$1$3() {
    return _regeneratorRuntime.async(function callee$1$3$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql(_Chromedriver2['default'].STATE_ONLINE);
          context$2$0.next = 3;
          return cd.stop();

        case 3:
          cd.state.should.eql(_Chromedriver2['default'].STATE_STOPPED);
          should.not.exist(cd.sessionId());

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should throw an error during start if spawn doesnt work', function callee$1$4() {
    var badCd;
    return _regeneratorRuntime.async(function callee$1$4$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          badCd = new _Chromedriver2['default']({ port: 1 });
          context$2$0.next = 3;
          return badCd.start(caps).should.eventually.be.rejectedWith('Could not proxy');

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should throw an error during start if session doesnt work', function callee$1$5() {
    var badCd;
    return _regeneratorRuntime.async(function callee$1$5$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          badCd = new _Chromedriver2['default']();
          context$2$0.next = 3;
          return badCd.start({ chromeOptions: { badCap: 'foo' } }).should.eventually.be.rejectedWith('cannot parse capability');

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// we miss the opportunity to listen for the 'starting' state
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvY2hyb21lZHJpdmVyLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OzRCQUV5QixPQUFPOzs7O29CQUNmLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2lCQUMvQixHQUFHOzs7O3NCQUNFLFNBQVM7Ozs7UUFDckIsV0FBVzs7QUFQbEIsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBU3hDLElBQUksTUFBTSxHQUFHLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQzNCLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFNBQVMsU0FBUyxDQUFFLEVBQUUsRUFBRTtBQUN0QixNQUFJLENBQUMsR0FBRyxlQUFFLEtBQUssRUFBRSxDQUFDO0FBQ2xCLElBQUUsQ0FBQyxFQUFFLENBQUMsMEJBQWEsYUFBYSxFQUFFLFVBQUEsR0FBRyxFQUFJO0FBQ3ZDLEtBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3RCLENBQUMsQ0FBQztBQUNILFNBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQztDQUNsQjs7QUFFRCxTQUFTLFNBQVMsQ0FBRSxFQUFFLEVBQUU7QUFDdEIsTUFBSSxDQUFDLEdBQUcsZUFBRSxLQUFLLEVBQUUsQ0FBQztBQUNsQixJQUFFLENBQUMsRUFBRSxDQUFDLDBCQUFhLFdBQVcsRUFBRSxVQUFBLEdBQUcsRUFBSTtBQUNyQyxLQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ2hCLENBQUMsQ0FBQztBQUNILFNBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQztDQUNsQjs7QUFFRCxTQUFlLDRCQUE0QjtNQUNyQyxHQUFHOzs7OztlQUFTLGVBQUUsTUFBTSxDQUFDLG9CQUFPLE1BQU0sRUFBRSxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUMsQ0FBQzs7O0FBQTlELFdBQUc7O0FBQ1AsV0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0NBQzNCOztBQUVELFFBQVEsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNO0FBQy9DLE1BQUksRUFBRSxHQUFHLElBQUksQ0FBQztBQUNkLE1BQU0sSUFBSSxHQUFHLEVBQUMsV0FBVyxFQUFFLFFBQVEsRUFBQyxDQUFDO0FBQ3JDLFFBQU0sQ0FBQztRQUNELElBQUk7Ozs7QUFBSixjQUFJLEdBQUcsRUFBRTs7QUFDYixZQUFFLEdBQUcsOEJBQWlCLElBQUksQ0FBQyxDQUFDOzs7Ozs7O0dBQzdCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx3QkFBd0IsRUFBRTtRQUV2QixnQkFBZ0I7Ozs7QUFEcEIsWUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzNCLDBCQUFnQixHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUM7O0FBQ3BDLFlBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZixZQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7O2lCQUMzQixnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLDBCQUFhLGNBQWMsQ0FBQzs7OztpQkFDM0QsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsMEJBQWEsWUFBWSxDQUFDOzs7QUFDNUQsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuQyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQzs7Ozs7OztHQUM5QixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsMEJBQTBCLEVBQUU7UUFDekIsR0FBRzs7Ozs7aUJBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFDLENBQUM7OztBQUF0RSxhQUFHOztBQUNQLGdCQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs7aUJBQ1YsRUFBRSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDOzs7QUFBekMsYUFBRzs7QUFDSCxhQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7OztHQUM5QixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsK0NBQStDLEVBQUU7UUFDOUMsR0FBRzs7Ozs7aUJBQVMsRUFBRSxDQUFDLGlCQUFpQixFQUFFOzs7QUFBbEMsYUFBRzs7QUFDUCxhQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Ozs7OztHQUN4QixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsMEJBQTBCLEVBQUU7UUFDekIsRUFBRTs7OztBQUFGLFlBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDOztBQUN0QixZQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7O2lCQUNQLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLDBCQUFhLGNBQWMsQ0FBQzs7OztpQkFDN0MsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsMEJBQWEsYUFBYSxDQUFDOzs7O2lCQUV2RCxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQywwQkFBYSxZQUFZLENBQUM7Ozs7Ozs7R0FDN0QsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHVCQUF1QixFQUFFO1FBQ3RCLGdCQUFnQjs7OztBQUFoQiwwQkFBZ0IsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDOztBQUNwQyxZQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7O2lCQUNKLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsMEJBQWEsY0FBYyxDQUFDOzs7QUFDakUsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDOztpQkFDM0IsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsMEJBQWEsYUFBYSxDQUFDOzs7QUFDN0QsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDOztpQkFDM0IsNEJBQTRCLEVBQUU7Ozs7Ozs7R0FDckMsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLElBQUksQ0FBQyx3REFBd0QsRUFBRTtRQUk1RCxnQkFBZ0I7Ozs7OztBQURwQixZQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMEJBQWEsYUFBYSxDQUFDLENBQUM7QUFDNUMsMEJBQWdCLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQzs7QUFDcEMsWUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNmLFlBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7aUJBQzNCLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsMEJBQWEsY0FBYyxDQUFDOzs7O2lCQUMzRCxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQywwQkFBYSxZQUFZLENBQUM7OztBQUM1RCxnQkFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLGdCQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO0FBQzdCLDBCQUFnQixHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7aUJBQzNCLEVBQUUsQ0FBQyxPQUFPLEVBQUU7Ozs7aUJBQ1osZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQywwQkFBYSxhQUFhLENBQUM7Ozs7Ozs7R0FDakUsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHNEQUFzRCxFQUFFO1FBQ3JELEdBQUcsRUFDSCxRQUFRLEVBRVIsR0FBRzs7OztBQUhILGFBQUcsR0FBRyw4QkFBaUIsRUFBQyxVQUFVLEVBQUUsaUJBQWlCLEVBQUMsQ0FBQztBQUN2RCxrQkFBUSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUM7O0FBQzdCLGFBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7O2lCQUNFLFFBQVE7OztBQUFwQixhQUFHOztBQUNQLGFBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7OztHQUN0QyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUM7O0FBR0gsUUFBUSxDQUFDLDhCQUE4QixFQUFFLFlBQU07QUFDN0MsTUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQ2QsTUFBTSxJQUFJLEdBQUcsRUFBQyxXQUFXLEVBQUUsUUFBUSxFQUFDLENBQUM7QUFDckMsUUFBTSxDQUFDO1FBQ0QsSUFBSTs7OztBQUFKLGNBQUksR0FBRyxFQUFFOztBQUNiLFlBQUUsR0FBRyw4QkFBaUIsSUFBSSxDQUFDLENBQUM7Ozs7Ozs7R0FDN0IsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHdCQUF3QixFQUFFOzs7O0FBQzNCLFlBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixnQkFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7O2lCQUMzQixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQzs7O0FBQ3BCLFlBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQyxZQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMEJBQWEsWUFBWSxDQUFDLENBQUM7QUFDL0MsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuQyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQzs7Ozs7OztHQUM5QixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsMEJBQTBCLEVBQUU7Ozs7QUFDN0IsWUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUFhLFlBQVksQ0FBQyxDQUFDOztpQkFDekMsRUFBRSxDQUFDLE9BQU8sRUFBRTs7O0FBQ2xCLFlBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQkFBYSxZQUFZLENBQUMsQ0FBQzs7Ozs7OztHQUNoRCxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsdUJBQXVCLEVBQUU7Ozs7QUFDMUIsWUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUFhLFlBQVksQ0FBQyxDQUFDOztpQkFDekMsRUFBRSxDQUFDLElBQUksRUFBRTs7O0FBQ2YsWUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDBCQUFhLGFBQWEsQ0FBQyxDQUFDO0FBQ2hELGdCQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQzs7Ozs7OztHQUNsQyxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMseURBQXlELEVBQUU7UUFDeEQsS0FBSzs7OztBQUFMLGVBQUssR0FBRyw4QkFBaUIsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFDLENBQUM7O2lCQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQzs7Ozs7OztHQUM3RSxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsMkRBQTJELEVBQUU7UUFDMUQsS0FBSzs7OztBQUFMLGVBQUssR0FBRywrQkFBa0I7O2lCQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUMsYUFBYSxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQyxFQUFDLENBQUMsQ0FDdkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLHlCQUF5QixDQUFDOzs7Ozs7O0dBQ3pFLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2Nocm9tZWRyaXZlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcblxuaW1wb3J0IENocm9tZWRyaXZlciBmcm9tICcuLi8uLic7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBRIGZyb20gJ3EnO1xuaW1wb3J0IHBzTm9kZSBmcm9tICdwcy1ub2RlJztcbmltcG9ydCAnbW9jaGF3YWl0JztcblxubGV0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmZ1bmN0aW9uIG5leHRTdGF0ZSAoY2QpIHtcbiAgbGV0IGQgPSBRLmRlZmVyKCk7XG4gIGNkLm9uKENocm9tZWRyaXZlci5FVkVOVF9DSEFOR0VELCBtc2cgPT4ge1xuICAgIGQucmVzb2x2ZShtc2cuc3RhdGUpO1xuICB9KTtcbiAgcmV0dXJuIGQucHJvbWlzZTtcbn1cblxuZnVuY3Rpb24gbmV4dEVycm9yIChjZCkge1xuICBsZXQgZCA9IFEuZGVmZXIoKTtcbiAgY2Qub24oQ2hyb21lZHJpdmVyLkVWRU5UX0VSUk9SLCBlcnIgPT4ge1xuICAgIGQucmVzb2x2ZShlcnIpO1xuICB9KTtcbiAgcmV0dXJuIGQucHJvbWlzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYXNzZXJ0Tm9SdW5uaW5nQ2hyb21lZHJpdmVycyAoKSB7XG4gIGxldCByZXMgPSBhd2FpdCBRLm5mY2FsbChwc05vZGUubG9va3VwLCB7Y29tbWFuZDogJ2Nocm9tZWRyaXZlcid9KTtcbiAgcmVzLnNob3VsZC5oYXZlLmxlbmd0aCgwKTtcbn1cblxuZGVzY3JpYmUoJ2Nocm9tZWRyaXZlciB3aXRoIEV2ZW50RW1pdHRlcicsICgpID0+IHtcbiAgbGV0IGNkID0gbnVsbDtcbiAgY29uc3QgY2FwcyA9IHticm93c2VyTmFtZTogJ2Nocm9tZSd9O1xuICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgIGxldCBvcHRzID0ge307XG4gICAgY2QgPSBuZXcgQ2hyb21lZHJpdmVyKG9wdHMpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBzdGFydCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgY2Quc3RhdGUuc2hvdWxkLmVxbCgnc3RvcHBlZCcpO1xuICAgIGxldCBuZXh0U3RhdGVQcm9taXNlID0gbmV4dFN0YXRlKGNkKTtcbiAgICBjZC5zdGFydChjYXBzKTtcbiAgICBjZC5jYXBhYmlsaXRpZXMuc2hvdWxkLmVxbChjYXBzKTtcbiAgICBhd2FpdCBuZXh0U3RhdGVQcm9taXNlLnNob3VsZC5iZWNvbWUoQ2hyb21lZHJpdmVyLlNUQVRFX1NUQVJUSU5HKTtcbiAgICBhd2FpdCBuZXh0U3RhdGUoY2QpLnNob3VsZC5iZWNvbWUoQ2hyb21lZHJpdmVyLlNUQVRFX09OTElORSk7XG4gICAgc2hvdWxkLmV4aXN0KGNkLmp3cHJveHkuc2Vzc2lvbklkKTtcbiAgICBzaG91bGQuZXhpc3QoY2Quc2Vzc2lvbklkKCkpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBydW4gc29tZSBjb21tYW5kcycsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgcmVzID0gYXdhaXQgY2Quc2VuZENvbW1hbmQoJy91cmwnLCAnUE9TVCcsIHt1cmw6ICdodHRwOi8vZ29vZ2xlLmNvbSd9KTtcbiAgICBzaG91bGQubm90LmV4aXN0KHJlcyk7XG4gICAgcmVzID0gYXdhaXQgY2Quc2VuZENvbW1hbmQoJy91cmwnLCAnR0VUJyk7XG4gICAgcmVzLnNob3VsZC5jb250YWluKCdnb29nbGUnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc2F5IHdoZXRoZXIgdGhlcmUgaXMgYSB3b3JraW5nIHdlYnZpZXcnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJlcyA9IGF3YWl0IGNkLmhhc1dvcmtpbmdXZWJ2aWV3KCk7XG4gICAgcmVzLnNob3VsZC5lcXVhbCh0cnVlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmVzdGFydCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHAxID0gbmV4dFN0YXRlKGNkKTtcbiAgICBjZC5yZXN0YXJ0KCk7XG4gICAgYXdhaXQgcDEuc2hvdWxkLmJlY29tZShDaHJvbWVkcml2ZXIuU1RBVEVfU1RPUFBJTkcpO1xuICAgIGF3YWl0IG5leHRTdGF0ZShjZCkuc2hvdWxkLmJlY29tZShDaHJvbWVkcml2ZXIuU1RBVEVfU1RPUFBFRCk7XG4gICAgLy8gd2UgbWlzcyB0aGUgb3Bwb3J0dW5pdHkgdG8gbGlzdGVuIGZvciB0aGUgJ3N0YXJ0aW5nJyBzdGF0ZVxuICAgIGF3YWl0IG5leHRTdGF0ZShjZCkuc2hvdWxkLmJlY29tZShDaHJvbWVkcml2ZXIuU1RBVEVfT05MSU5FKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc3RvcCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IG5leHRTdGF0ZVByb21pc2UgPSBuZXh0U3RhdGUoY2QpO1xuICAgIGNkLnN0b3AoKTtcbiAgICBhd2FpdCBuZXh0U3RhdGVQcm9taXNlLnNob3VsZC5iZWNvbWUoQ2hyb21lZHJpdmVyLlNUQVRFX1NUT1BQSU5HKTtcbiAgICBzaG91bGQubm90LmV4aXN0KGNkLnNlc3Npb25JZCgpKTtcbiAgICBhd2FpdCBuZXh0U3RhdGUoY2QpLnNob3VsZC5iZWNvbWUoQ2hyb21lZHJpdmVyLlNUQVRFX1NUT1BQRUQpO1xuICAgIHNob3VsZC5ub3QuZXhpc3QoY2Quc2Vzc2lvbklkKCkpO1xuICAgIGF3YWl0IGFzc2VydE5vUnVubmluZ0Nocm9tZWRyaXZlcnMoKTtcbiAgfSk7XG4gIGl0LnNraXAoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUgdG8gc3RvcHBlZCBpZiBjaHJvbWVkcml2ZXIgY3Jhc2hlcycsIGFzeW5jICgpID0+IHtcbiAgICAvLyB0ZXN0IHdvcmtzIGJ1dCBpcyBza2lwcGVkIGJlY2F1c2UgaXQgbGVhdmVzIGEgY2hyb21lIHdpbmRvdyBvcnBoYW5lZFxuICAgIC8vIGFuZCBJIGNhbid0IGZpZ3VyZSBvdXQgYSB3YXkgdG8gc2FmZWx5IGtpbGwgb25seSB0aGF0IG9uZVxuICAgIGNkLnN0YXRlLnNob3VsZC5lcWwoQ2hyb21lZHJpdmVyLlNUQVRFX1NUT1BQRUQpO1xuICAgIGxldCBuZXh0U3RhdGVQcm9taXNlID0gbmV4dFN0YXRlKGNkKTtcbiAgICBjZC5zdGFydChjYXBzKTtcbiAgICBjZC5jYXBhYmlsaXRpZXMuc2hvdWxkLmVxbChjYXBzKTtcbiAgICBhd2FpdCBuZXh0U3RhdGVQcm9taXNlLnNob3VsZC5iZWNvbWUoQ2hyb21lZHJpdmVyLlNUQVRFX1NUQVJUSU5HKTtcbiAgICBhd2FpdCBuZXh0U3RhdGUoY2QpLnNob3VsZC5iZWNvbWUoQ2hyb21lZHJpdmVyLlNUQVRFX09OTElORSk7XG4gICAgc2hvdWxkLmV4aXN0KGNkLmp3cHJveHkuc2Vzc2lvbklkKTtcbiAgICBzaG91bGQuZXhpc3QoY2Quc2Vzc2lvbklkKCkpO1xuICAgIG5leHRTdGF0ZVByb21pc2UgPSBuZXh0U3RhdGUoY2QpO1xuICAgIGF3YWl0IGNkLmtpbGxBbGwoKTtcbiAgICBhd2FpdCBuZXh0U3RhdGVQcm9taXNlLnNob3VsZC5iZWNvbWUoQ2hyb21lZHJpdmVyLlNUQVRFX1NUT1BQRUQpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGNocm9tZWRyaXZlciBkb2VzbnQgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGNkMiA9IG5ldyBDaHJvbWVkcml2ZXIoe2V4ZWN1dGFibGU6ICcvZG9lcy9ub3QvZXhpc3QnfSk7XG4gICAgbGV0IG5leHRFcnJQID0gbmV4dEVycm9yKGNkMik7XG4gICAgY2QyLnN0YXJ0KHt9KTtcbiAgICBsZXQgZXJyID0gYXdhaXQgbmV4dEVyclA7XG4gICAgZXJyLm1lc3NhZ2Uuc2hvdWxkLmNvbnRhaW4oJ0VOT0VOVCcpO1xuICB9KTtcbn0pO1xuXG5cbmRlc2NyaWJlKCdjaHJvbWVkcml2ZXIgd2l0aCBhc3luY2F3YWl0JywgKCkgPT4ge1xuICBsZXQgY2QgPSBudWxsO1xuICBjb25zdCBjYXBzID0ge2Jyb3dzZXJOYW1lOiAnY2hyb21lJ307XG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSB7fTtcbiAgICBjZCA9IG5ldyBDaHJvbWVkcml2ZXIob3B0cyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHN0YXJ0IGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICBjZC5zdGF0ZS5zaG91bGQuZXFsKCdzdG9wcGVkJyk7XG4gICAgc2hvdWxkLm5vdC5leGlzdChjZC5zZXNzaW9uSWQoKSk7XG4gICAgYXdhaXQgY2Quc3RhcnQoY2Fwcyk7XG4gICAgY2QuY2FwYWJpbGl0aWVzLnNob3VsZC5lcWwoY2Fwcyk7XG4gICAgY2Quc3RhdGUuc2hvdWxkLmVxbChDaHJvbWVkcml2ZXIuU1RBVEVfT05MSU5FKTtcbiAgICBzaG91bGQuZXhpc3QoY2Quandwcm94eS5zZXNzaW9uSWQpO1xuICAgIHNob3VsZC5leGlzdChjZC5zZXNzaW9uSWQoKSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHJlc3RhcnQgYSBzZXNzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNkLnN0YXRlLnNob3VsZC5lcWwoQ2hyb21lZHJpdmVyLlNUQVRFX09OTElORSk7XG4gICAgYXdhaXQgY2QucmVzdGFydCgpO1xuICAgIGNkLnN0YXRlLnNob3VsZC5lcWwoQ2hyb21lZHJpdmVyLlNUQVRFX09OTElORSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHN0b3AgYSBzZXNzaW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIGNkLnN0YXRlLnNob3VsZC5lcWwoQ2hyb21lZHJpdmVyLlNUQVRFX09OTElORSk7XG4gICAgYXdhaXQgY2Quc3RvcCgpO1xuICAgIGNkLnN0YXRlLnNob3VsZC5lcWwoQ2hyb21lZHJpdmVyLlNUQVRFX1NUT1BQRUQpO1xuICAgIHNob3VsZC5ub3QuZXhpc3QoY2Quc2Vzc2lvbklkKCkpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBkdXJpbmcgc3RhcnQgaWYgc3Bhd24gZG9lc250IHdvcmsnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGJhZENkID0gbmV3IENocm9tZWRyaXZlcih7cG9ydDogMX0pO1xuICAgIGF3YWl0IGJhZENkLnN0YXJ0KGNhcHMpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgnQ291bGQgbm90IHByb3h5Jyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGR1cmluZyBzdGFydCBpZiBzZXNzaW9uIGRvZXNudCB3b3JrJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBiYWRDZCA9IG5ldyBDaHJvbWVkcml2ZXIoKTtcbiAgICBhd2FpdCBiYWRDZC5zdGFydCh7Y2hyb21lT3B0aW9uczoge2JhZENhcDogJ2Zvbyd9fSlcbiAgICAgICAgICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoJ2Nhbm5vdCBwYXJzZSBjYXBhYmlsaXR5Jyk7XG4gIH0pO1xufSk7XG4iXX0=