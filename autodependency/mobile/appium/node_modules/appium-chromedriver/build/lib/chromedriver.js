'use strict';

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _get = require('babel-runtime/helpers/get')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _events = require('events');

var _events2 = _interopRequireWildcard(_events);

var _JWProxy = require('appium-jsonwp-proxy');

var _log = require('appium-logger');

var _log2 = _interopRequireWildcard(_log);

var _npmChromedriver = require('chromedriver');

var _npmChromedriver2 = _interopRequireWildcard(_npmChromedriver);

var _cp = require('child_process');

var _cp2 = _interopRequireWildcard(_cp);

var _through = require('through');

var _through2 = _interopRequireWildcard(_through);

var _support = require('appium-support');

var _support2 = _interopRequireWildcard(_support);

var _retryInterval = require('asyncbox');

var _Q = require('q');

var _Q2 = _interopRequireWildcard(_Q);

require('source-map-support').install();

var spawn = _cp2['default'].spawn;

var DEFAULT_HOST = '127.0.0.1';
var DEFAULT_PORT = 9515;

var Chromedriver = (function (_events$EventEmitter) {
  function Chromedriver() {
    var args = arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Chromedriver);

    var host = args.host;
    var port = args.port;
    var executable = args.executable;
    var cmdArgs = args.cmdArgs;

    _get(Object.getPrototypeOf(Chromedriver.prototype), 'constructor', this).call(this);
    this.proxyHost = host || DEFAULT_HOST;
    this.proxyPort = port || DEFAULT_PORT;
    this.cmdArgs = cmdArgs;
    this.proc = null;
    this.chromedriver = executable || Chromedriver.getPath();
    this.state = Chromedriver.STATE_STOPPED;
    this.jwproxy = new _JWProxy.JWProxy({ server: this.proxyHost, port: this.proxyPort });
    _log2['default'].info('Set chromedriver binary as: ' + this.chromedriver);
  }

  _inherits(Chromedriver, _events$EventEmitter);

  _createClass(Chromedriver, [{
    key: 'start',
    value: function start(caps) {
      var d, args, handleStartErr;
      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            d = _Q2['default'].defer();

            this.capabilities = caps;
            this.changeState(Chromedriver.STATE_STARTING);
            context$2$0.next = 5;
            return this.killAll();

          case 5:
            args = ['--url-base=wd/hub', '--port=' + this.proxyPort];

            _log2['default'].info('Spawning chromedriver with: ' + this.chromedriver + ' ' + args.join(' '));
            this.proc = spawn(this.chromedriver, args);
            this.proc.stdout.setEncoding('utf8');
            this.proc.stderr.setEncoding('utf8');

            handleStartErr = function handleStartErr(err) {
              _this.proc.removeAllListeners('exit');
              _this.proc.kill('SIGINT');
              d.reject(err);
            };

            this.proc.on('error', function (err) {
              var newErr = new Error('Chromedriver process failed with error: ' + err.message);
              _log2['default'].error(newErr.message);
              _this.emit(Chromedriver.EVENT_ERROR, newErr);
              handleStartErr(err);
            });

            this.proc.stdout.pipe(_through2['default'](function (data) {
              _log2['default'].info('[CHROMEDRIVER STDOUT] ' + data.trim());
              if (data.indexOf('Starting ') === 0) {
                (function callee$3$0() {
                  return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                    while (1) switch (context$4$0.prev = context$4$0.next) {
                      case 0:
                        context$4$0.prev = 0;
                        context$4$0.next = 3;
                        return this.waitForOnline();

                      case 3:
                        context$4$0.next = 5;
                        return this.startSession();

                      case 5:
                        d.resolve();
                        context$4$0.next = 12;
                        break;

                      case 8:
                        context$4$0.prev = 8;
                        context$4$0.t0 = context$4$0['catch'](0);

                        handleStartErr(context$4$0.t0);
                        this.emit(Chromedriver.EVENT_ERROR, context$4$0.t0);

                      case 12:
                      case 'end':
                        return context$4$0.stop();
                    }
                  }, null, _this, [[0, 8]]);
                })();
              }
            }));

            this.proc.stderr.pipe(_through2['default'](function (data) {
              _log2['default'].info('[CHROMEDRIVER STDERR] ' + data.trim());
            }));

            this.proc.on('exit', function (code, signal) {
              if (_this.state !== Chromedriver.STATE_STOPPED && _this.state !== Chromedriver.STATE_STOPPING) {
                var msg = 'Chromedriver exited unexpectedly with code ' + code + ', ' + ('signal ' + signal);
                _log2['default'].error(msg);
                _this.changeState(Chromedriver.STATE_STOPPED);
              }
            });
            return context$2$0.abrupt('return', d.promise);

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'sessionId',
    value: function sessionId() {
      if (this.state !== Chromedriver.STATE_ONLINE) {
        return null;
      }

      return this.jwproxy.sessionId;
    }
  }, {
    key: 'restart',
    value: function restart() {
      var p;
      return _regeneratorRuntime.async(function restart$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _log2['default'].info('Restarting chromedriver');
            if (this.state !== Chromedriver.STATE_ONLINE) {
              this.emit(Chromedriver.EVENT_ERROR, new Error('Can\'t restart when we\'re not online'));
            }
            p = this._statePromise(Chromedriver.STATE_STOPPED);

            this.stop();
            _log2['default'].info('Waiting for chromedriver to completely stop');
            context$2$0.next = 7;
            return p;

          case 7:
            context$2$0.next = 9;
            return this.start(this.capabilities);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: '_statePromise',
    value: function _statePromise() {
      var state = arguments[0] === undefined ? null : arguments[0];

      var d = _Q2['default'].defer();
      var listener = (function (msg) {
        if (state === null || msg.state === state) {
          d.resolve(msg.state);
          this.removeListener(Chromedriver.EVENT_CHANGED, listener);
        }
      }).bind(this);
      this.on(Chromedriver.EVENT_CHANGED, listener);
      return d.promise;
    }
  }, {
    key: 'waitForOnline',
    value: function waitForOnline() {
      return _regeneratorRuntime.async(function waitForOnline$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _retryInterval.retryInterval(20, 200, this.getStatus.bind(this));

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.jwproxy.command('/status', 'GET');

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSession',
    value: function startSession() {
      return _regeneratorRuntime.async(function startSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _retryInterval.retryInterval(4, 200, this.jwproxy.command.bind(this.jwproxy), '/session', 'POST', { desiredCapabilities: this.capabilities });

          case 2:
            this.changeState(Chromedriver.STATE_ONLINE);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      var d;
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.changeState(Chromedriver.STATE_STOPPING);
            d = _Q2['default'].defer();

            this.proc.on('close', d.resolve);
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return this.jwproxy.command('', 'DELETE');

          case 6:
            this.proc.kill('SIGINT');
            context$2$0.next = 9;
            return d.promise;

          case 9:
            this.changeState(Chromedriver.STATE_STOPPED);
            context$2$0.next = 15;
            break;

          case 12:
            context$2$0.prev = 12;
            context$2$0.t1 = context$2$0['catch'](3);

            _log2['default'].error(context$2$0.t1);

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 12]]);
    }
  }, {
    key: 'changeState',
    value: function changeState(state) {
      this.state = state;
      this.emit(Chromedriver.EVENT_CHANGED, { state: state });
    }
  }, {
    key: 'sendCommand',
    value: function sendCommand(url, method, body) {
      return this.jwproxy.command(url, method, body);
    }
  }, {
    key: 'proxyReq',
    value: function proxyReq(req, res) {
      return this.jwproxy.proxyReqRes(req, res);
    }
  }, {
    key: 'killAll',
    value: function killAll() {
      var cmd;
      return _regeneratorRuntime.async(function killAll$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmd = undefined;

            if (_support2['default'].system.isWindows()) {
              cmd = 'FOR /F "usebackq tokens=5" %a in (`netstat -nao ^| ' + 'findstr /R /C:"' + this.proxyPort + ' "`) do (' + 'FOR /F "usebackq" %b in (`TASKLIST /FI "PID eq %a" ^| ' + 'findstr /I chromedriver.exe`) do (IF NOT %b=="" TASKKILL ' + '/F /PID %a))';
            } else {
              cmd = 'ps -ef | grep ' + this.chromedriver + ' | grep -v grep |' + 'grep -e \'--port=' + this.proxyPort + '\\(\\s.*\\)\\?$\' | awk ' + '\'{ print $2 }\' | xargs kill -15';
            }
            _log2['default'].info('Killing any old chromedrivers, running: ' + cmd);
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _Q2['default'].nfcall(_cp2['default'].exec, cmd);

          case 6:
            _log2['default'].info('Successfully cleaned up old chromedrivers');
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t2 = context$2$0['catch'](3);

            _log2['default'].info('No old chromedrivers seemed to exist');

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 9]]);
    }
  }, {
    key: 'hasWorkingWebview',
    value: function hasWorkingWebview() {
      return _regeneratorRuntime.async(function hasWorkingWebview$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return this.jwproxy.command('/url', 'GET');

          case 3:
            return context$2$0.abrupt('return', true);

          case 6:
            context$2$0.prev = 6;
            context$2$0.t3 = context$2$0['catch'](0);
            return context$2$0.abrupt('return', false);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 6]]);
    }
  }], [{
    key: 'getPath',
    value: function getPath() {
      return _npmChromedriver2['default'].path;
    }
  }]);

  return Chromedriver;
})(_events2['default'].EventEmitter);

Chromedriver.EVENT_ERROR = 'chromedriver_error';
Chromedriver.EVENT_CHANGED = 'stateChanged';
Chromedriver.STATE_STOPPED = 'stopped';
Chromedriver.STATE_STARTING = 'starting';
Chromedriver.STATE_ONLINE = 'online';
Chromedriver.STATE_STOPPING = 'stopping';

exports['default'] = Chromedriver;
module.exports = exports['default'];

// retry session start 4 times, sometimes this fails due to adb

// sometimes chromedriver stops automating webviews. this method runs a
// simple command to determine our state, and responds accordingly
//# sourceMappingURL=data:application/json;base64,