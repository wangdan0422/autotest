'use strict';

var _core = require('babel-runtime/core-js')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

_core.Object.defineProperty(exports, '__esModule', {
  value: true
});

var _chai = require('chai');

var _chai2 = _interopRequireWildcard(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireWildcard(_sinon);

var _import = require('lodash');

var _import2 = _interopRequireWildcard(_import);

var _getLogger = require('../lib/logger');

_chai2['default'].should();

function setupWriters() {
  return { stdout: _sinon2['default'].spy(process.stdout, 'write'),
    stderr: _sinon2['default'].spy(process.stderr, 'write') };
}

function getDynamicLogger(testingMode) {
  process.env._TESTING = testingMode ? '1' : '0';
  return _getLogger.getLogger();
}

function restoreWriters(writers) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _core.getIterator(_import2['default'].values(writers)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var w = _step.value;

      w.restore();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function assertOutputContains(writers, output) {
  var someoneHadOutput = false;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _core.getIterator(_import2['default'].values(writers)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var w = _step2.value;

      if (w.calledWith) {
        someoneHadOutput = w.calledWith(output);
        if (someoneHadOutput) break;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  if (!someoneHadOutput) {
    throw new Error('Expected someone to have been called with: \'' + output + '\'');
  }
}

function assertOutputDoesntContain(writers, output) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _core.getIterator(_import2['default'].values(writers)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var w = _step3.value;

      _import2['default'].flatten(w.args).should.not.contain(output);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3['return']) {
        _iterator3['return']();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
}

exports.setupWriters = setupWriters;
exports.restoreWriters = restoreWriters;
exports.assertOutputContains = assertOutputContains;
exports.assertOutputDoesntContain = assertOutputDoesntContain;
exports.getDynamicLogger = getDynamicLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUFpQixNQUFNOzs7O3FCQUNMLE9BQU87Ozs7c0JBQ1gsUUFBUTs7Ozt5QkFDSSxlQUFlOztBQUN6QyxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFZCxTQUFTLFlBQVksR0FBSTtBQUN2QixTQUFPLEVBQUMsUUFBVSxtQkFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7QUFDNUMsWUFBVSxtQkFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBQyxDQUFDO0NBQ3ZEOztBQUVELFNBQVMsZ0JBQWdCLENBQUUsV0FBVyxFQUFFO0FBQ3RDLFNBQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQy9DLFNBQU8sV0FWQSxTQUFTLEVBVUUsQ0FBQztDQUNwQjs7QUFFRCxTQUFTLGNBQWMsQ0FBRSxPQUFPLEVBQUU7Ozs7OztBQUNoQywyQ0FBYyxvQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLDRHQUFFO1VBQXhCLENBQUM7O0FBQ1IsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQUNGOztBQUVELFNBQVMsb0JBQW9CLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUM5QyxNQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQzs7Ozs7O0FBQzdCLDRDQUFjLG9CQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUhBQUU7VUFBeEIsQ0FBQzs7QUFDUixVQUFJLENBQUMsQ0FBQyxVQUFVLEVBQUU7QUFDaEIsd0JBQWdCLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QyxZQUFJLGdCQUFnQixFQUFFLE1BQU07T0FDN0I7S0FDRjs7Ozs7Ozs7Ozs7Ozs7OztBQUNELE1BQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUNyQixVQUFNLElBQUksS0FBSyxDQUFDLCtDQUE4QyxHQUFHLE1BQU0sR0FBRyxJQUFHLENBQUMsQ0FBQztHQUNoRjtDQUNGOztBQUVELFNBQVMseUJBQXlCLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTs7Ozs7O0FBQ25ELDRDQUFjLG9CQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUhBQUU7VUFBeEIsQ0FBQzs7QUFDUiwwQkFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzlDOzs7Ozs7Ozs7Ozs7Ozs7Q0FDRjs7UUFFUSxZQUFZLEdBQVosWUFBWTtRQUFFLGNBQWMsR0FBZCxjQUFjO1FBQUUsb0JBQW9CLEdBQXBCLG9CQUFvQjtRQUNsRCx5QkFBeUIsR0FBekIseUJBQXlCO1FBQUUsZ0JBQWdCLEdBQWhCLGdCQUFnQiIsImZpbGUiOiJ0ZXN0L2hlbHBlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnLi4vbGliL2xvZ2dlcic7XG5jaGFpLnNob3VsZCgpO1xuXG5mdW5jdGlvbiBzZXR1cFdyaXRlcnMgKCkge1xuICByZXR1cm4geydzdGRvdXQnOiBzaW5vbi5zcHkocHJvY2Vzcy5zdGRvdXQsICd3cml0ZScpLFxuICAgICAgICAgICdzdGRlcnInOiBzaW5vbi5zcHkocHJvY2Vzcy5zdGRlcnIsICd3cml0ZScpfTtcbn1cblxuZnVuY3Rpb24gZ2V0RHluYW1pY0xvZ2dlciAodGVzdGluZ01vZGUpIHtcbiAgcHJvY2Vzcy5lbnYuX1RFU1RJTkcgPSB0ZXN0aW5nTW9kZSA/ICcxJyA6ICcwJztcbiAgcmV0dXJuIGdldExvZ2dlcigpO1xufVxuXG5mdW5jdGlvbiByZXN0b3JlV3JpdGVycyAod3JpdGVycykge1xuICBmb3IgKGxldCB3IG9mIF8udmFsdWVzKHdyaXRlcnMpKSB7XG4gICAgdy5yZXN0b3JlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T3V0cHV0Q29udGFpbnMgKHdyaXRlcnMsIG91dHB1dCkge1xuICBsZXQgc29tZW9uZUhhZE91dHB1dCA9IGZhbHNlO1xuICBmb3IgKGxldCB3IG9mIF8udmFsdWVzKHdyaXRlcnMpKSB7XG4gICAgaWYgKHcuY2FsbGVkV2l0aCkge1xuICAgICAgc29tZW9uZUhhZE91dHB1dCA9IHcuY2FsbGVkV2l0aChvdXRwdXQpO1xuICAgICAgaWYgKHNvbWVvbmVIYWRPdXRwdXQpIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoIXNvbWVvbmVIYWRPdXRwdXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzb21lb25lIHRvIGhhdmUgYmVlbiBjYWxsZWQgd2l0aDogJ1wiICsgb3V0cHV0ICsgXCInXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE91dHB1dERvZXNudENvbnRhaW4gKHdyaXRlcnMsIG91dHB1dCkge1xuICBmb3IgKGxldCB3IG9mIF8udmFsdWVzKHdyaXRlcnMpKSB7XG4gICAgXy5mbGF0dGVuKHcuYXJncykuc2hvdWxkLm5vdC5jb250YWluKG91dHB1dCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgc2V0dXBXcml0ZXJzLCByZXN0b3JlV3JpdGVycywgYXNzZXJ0T3V0cHV0Q29udGFpbnMsXG4gICAgICAgICBhc3NlcnRPdXRwdXREb2VzbnRDb250YWluLCBnZXREeW5hbWljTG9nZ2VyIH07XG4iXX0=