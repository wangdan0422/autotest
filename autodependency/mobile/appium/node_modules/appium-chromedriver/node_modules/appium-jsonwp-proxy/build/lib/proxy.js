'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _import = require('lodash');

var _import2 = _interopRequireWildcard(_import);

var _mockRequest = require('../test/mock-request');

var _log = require('appium-logger');

var _log2 = _interopRequireWildcard(_log);

var _realRequest = require('request');

var _realRequest2 = _interopRequireWildcard(_realRequest);

var _jwpStatus = require('jsonwp-status');

var _jwpStatus2 = _interopRequireWildcard(_jwpStatus);

var _Q = require('q');

var _Q2 = _interopRequireWildcard(_Q);

function truncate(json) {
  var chars = arguments[1] === undefined ? 200 : arguments[1];

  json = json || '';
  if (typeof json !== 'string') {
    json = JSON.stringify(json);
  }
  var ext = json.length > chars ? '...' : '';
  return json.slice(0, chars) + ext;
}

function safeJson(body) {
  try {
    body = JSON.parse(body);
  } catch (e) {}
  return body;
}

var JWProxy = (function () {
  function JWProxy() {
    var opts = arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, JWProxy);

    _Object$assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null,
      mockRequest: false
    }, opts);
    this.scheme = this.scheme.toLowerCase();
  }

  _createClass(JWProxy, [{
    key: 'request',
    value: function request() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (this.mockRequest) {
        return _mockRequest.request.apply(undefined, args);
      } else {
        return _realRequest2['default'].apply(undefined, args);
      }
    }
  }, {
    key: 'endpointRequiresSessionId',
    value: function endpointRequiresSessionId(endpoint) {
      return !_import2['default'].contains(['/session', '/sessions', '/status'], endpoint);
    }
  }, {
    key: 'getUrlForProxy',
    value: function getUrlForProxy(url) {
      if (url === '') url = '/';
      var proxyBase = '' + this.scheme + '://' + this.server + ':' + this.port + '' + this.base;
      var endpointRe = '(/(session|status))';
      var rest = '';
      if (/^http/.test(url)) {
        var first = new RegExp('(https?://.+)' + endpointRe).exec(url);
        if (!first) {
          throw new Error('Got a complete url but could not extract JWP endpoint');
        }
        rest = url.replace(first[1], '');
      } else if (new RegExp('^/').test(url)) {
        rest = url;
      } else {
        throw new Error('Didn\'t know what to do with url \'' + url + '\'');
      }
      var requiresSessionId = this.endpointRequiresSessionId(rest);

      if (requiresSessionId && this.sessionId === null) {
        throw new Error('Trying to proxy a session command without session id');
      }

      var stripPrefixRe = new RegExp('^.+(/(session|status).*)$');
      if (stripPrefixRe.test(rest)) {
        rest = stripPrefixRe.exec(rest)[1];
      }

      if (!new RegExp(endpointRe).test(rest)) {
        rest = '/session/' + this.sessionId + '' + rest;
      }

      var sessionBaseRe = new RegExp('^/session/([^/]+)');
      if (sessionBaseRe.test(rest)) {
        // we have something like /session/:id/foobar, so we need to replace
        // the session id
        var match = sessionBaseRe.exec(rest);
        rest = rest.replace(match[1], this.sessionId);
      } else if (requiresSessionId) {
        throw new Error('Got bad session base with rest of url: ' + rest);
      }
      rest = rest.replace(/\/$/, ''); // can't have trailing slashes
      return proxyBase + rest;
    }
  }, {
    key: 'proxy',
    value: function proxy(url, method) {
      var body = arguments[2] === undefined ? null : arguments[2];

      var newUrl, reqOpts, res, resBody, _ref, _ref2;

      return _regeneratorRuntime.async(function proxy$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            method = method.toUpperCase();
            newUrl = this.getUrlForProxy(url);
            reqOpts = {
              url: this.getUrlForProxy(url),
              method: method,
              headers: { 'Content-type': 'application/json;charset=UTF=8' }
            };

            if (body !== null) {
              if (typeof body !== 'object') {
                body = JSON.parse(body);
              }
              reqOpts.json = body;
            }
            _log2['default'].info('Proxying [' + method + ' ' + (url || '/') + '] to [' + method + ' ' + newUrl + ']' + (body ? ' with body: ' + truncate(body) : ' with no body'));
            res = undefined, resBody = undefined;
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _Q2['default'].ninvoke(this, 'request', reqOpts);

          case 9:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            res = _ref2[0];
            resBody = _ref2[1];

            _log2['default'].info('Got response with status ' + res.statusCode + ': ' + truncate(resBody));
            if (/\/session$/.test(url) && method === 'POST') {
              if (res.statusCode === 200) {
                this.sessionId = resBody.sessionId;
              } else if (res.statusCode === 303) {
                this.sessionId = /\/session\/([^\/]+)/.exec(resBody)[1];
              }
            }
            context$2$0.next = 20;
            break;

          case 17:
            context$2$0.prev = 17;
            context$2$0.t0 = context$2$0['catch'](6);
            throw new Error('Could not proxy command to remote server. ' + ('Original error: ' + context$2$0.t0.message));

          case 20:
            return context$2$0.abrupt('return', [res, resBody]);

          case 21:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6, 17]]);
    }
  }, {
    key: 'command',
    value: function command(url, method) {
      var body = arguments[2] === undefined ? null : arguments[2];

      var _ref3, _ref32, response, resBody, statusCodesWithRes, message, e;

      return _regeneratorRuntime.async(function command$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.proxy(url, method, body);

          case 2:
            _ref3 = context$2$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            response = _ref32[0];
            resBody = _ref32[1];
            statusCodesWithRes = [100, 200, 500];

            resBody = safeJson(resBody);

            if (!(_import2['default'].contains(statusCodesWithRes, response.statusCode) && (_import2['default'].isUndefined(resBody.status) || _import2['default'].isUndefined(resBody.value)))) {
              context$2$0.next = 10;
              break;
            }

            throw new Error('Did not get a valid response object. Object was: ' + JSON.stringify(resBody));

          case 10:
            if (!_import2['default'].contains(statusCodesWithRes, response.statusCode)) {
              context$2$0.next = 24;
              break;
            }

            if (!(response.statusCode === 200 && resBody.status === 0)) {
              context$2$0.next = 15;
              break;
            }

            return context$2$0.abrupt('return', resBody.value);

          case 15:
            if (!(response.statusCode === 200 && _import2['default'].isUndefined(resBody.status))) {
              context$2$0.next = 17;
              break;
            }

            return context$2$0.abrupt('return', resBody);

          case 17:
            message = _jwpStatus2['default'].getSummaryByCode(resBody.status);

            if (resBody.value.message) {
              message += ' (Original error: ' + resBody.value.message + ')';
            }
            e = new Error(message);

            e.status = resBody.status;
            e.value = resBody.value;
            e.httpCode = response.statusCode;
            throw e;

          case 24:
            throw new Error('Didn\'t know what to do with response code ' + response.statusCode);

          case 25:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyReqRes',
    value: function proxyReqRes(req, res) {
      var _ref4, _ref42, response, body;

      return _regeneratorRuntime.async(function proxyReqRes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return this.proxy(req.originalUrl, req.method, req.body);

          case 2:
            _ref4 = context$2$0.sent;
            _ref42 = _slicedToArray(_ref4, 2);
            response = _ref42[0];
            body = _ref42[1];

            res.headers = response.headers;
            res.set('Content-type', response.headers['content-type']);
            // if the proxied response contains a sessionId that the downstream
            // driver has generated, we don't want to return that to the client.
            // Instead, return the id for the current session
            body = safeJson(body);
            if (body && body.sessionId && this.sessionId) {
              body.sessionId = this.sessionId;
            }
            res.status(response.statusCode).send(JSON.stringify(body));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return JWProxy;
})();

exports['default'] = JWProxy;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,