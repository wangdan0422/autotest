'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

/* global describe:true, it:true, before:true, after:true */

var _JWProxy = require('../..');

var _cp = require('child_process');

var _cp2 = _interopRequireWildcard(_cp);

var _chai = require('chai');

var _chai2 = _interopRequireWildcard(_chai);

var _sleep = require('asyncbox');

var _chromedriver = require('chromedriver');

var _chromedriver2 = _interopRequireWildcard(_chromedriver);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireWildcard(_chaiAsPromised);

require('mochawait');

require('source-map-support').install();

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('proxy', function () {
  var cdProc = null;
  var j = new _JWProxy.JWProxy();
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cdProc = _cp2['default'].spawn(_chromedriver2['default'].path, ['--url-base=/wd/hub', '--port=4444']);
          context$2$0.next = 3;
          return _sleep.sleep(1000);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should proxy status straight', function callee$1$1() {
    var _ref, _ref2, res, resBody;

    return _regeneratorRuntime.async(function callee$1$1$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return j.proxy('/status', 'GET');

        case 2:
          _ref = context$2$0.sent;
          _ref2 = _slicedToArray(_ref, 2);
          res = _ref2[0];
          resBody = _ref2[1];

          resBody = JSON.parse(resBody);
          res.statusCode.should.equal(200);
          resBody.status.should.equal(0);
          resBody.value.should.have.property('build');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should proxy status as command', function callee$1$2() {
    var res;
    return _regeneratorRuntime.async(function callee$1$2$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return j.command('/status', 'GET');

        case 2:
          res = context$2$0.sent;

          res.should.have.property('build');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start a new session', function callee$1$3() {
    var caps, res;
    return _regeneratorRuntime.async(function callee$1$3$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          caps = { browserName: 'chrome' };
          context$2$0.next = 3;
          return j.command('/session', 'POST', { desiredCapabilities: caps });

        case 3:
          res = context$2$0.sent;

          res.should.have.property('browserName');
          j.sessionId.should.have.length(32);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should quit a session', function callee$1$4() {
    var res;
    return _regeneratorRuntime.async(function callee$1$4$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return j.command('', 'DELETE');

        case 2:
          res = context$2$0.sent;

          should.not.exist(res);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$5() {
    return _regeneratorRuntime.async(function callee$1$5$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cdProc.kill();
          context$2$0.next = 3;
          return _sleep.sleep(500);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7dUJBSXdCLE9BQU87O2tCQUNoQixlQUFlOzs7O29CQUNiLE1BQU07Ozs7cUJBQ0QsVUFBVTs7NEJBQ1AsY0FBYzs7Ozs4QkFDWixrQkFBa0I7Ozs7UUFDdEMsV0FBVzs7QUFWbEIsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7O0FBWXhDLElBQUksTUFBTSxHQUFHLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQzNCLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBTTtBQUN0QixNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbEIsTUFBSSxDQUFDLEdBQUcsYUFiRCxPQUFPLEVBYU8sQ0FBQztBQUN0QixRQUFNLENBQUM7Ozs7QUFDTCxnQkFBTSxHQUFHLGdCQUFHLEtBQUssQ0FBQywwQkFBYSxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDOztpQkFDdEUsT0FiRCxLQUFLLENBYUUsSUFBSSxDQUFDOzs7Ozs7O0dBQ2xCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyw4QkFBOEIsRUFBRTtxQkFDNUIsR0FBRyxFQUFFLE9BQU87Ozs7OztpQkFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7Ozs7O0FBQS9DLGFBQUc7QUFBRSxpQkFBTzs7QUFDakIsaUJBQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlCLGFBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNqQyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLGlCQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O0dBQzdDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtRQUMvQixHQUFHOzs7OztpQkFBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7OztBQUF2QyxhQUFHOztBQUNQLGFBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Ozs7OztHQUNuQyxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsNEJBQTRCLEVBQUU7UUFDM0IsSUFBSSxFQUNKLEdBQUc7Ozs7QUFESCxjQUFJLEdBQUcsRUFBQyxXQUFXLEVBQUUsUUFBUSxFQUFDOztpQkFDbEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLEVBQUMsbUJBQW1CLEVBQUUsSUFBSSxFQUFDLENBQUM7OztBQUF0RSxhQUFHOztBQUNQLGFBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4QyxXQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7Ozs7O0dBQ3BDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx1QkFBdUIsRUFBRTtRQUN0QixHQUFHOzs7OztpQkFBUyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUM7OztBQUFuQyxhQUFHOztBQUNQLGdCQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Ozs7OztHQUN2QixDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7QUFDSixnQkFBTSxDQUFDLElBQUksRUFBRSxDQUFDOztpQkFDUixPQXRDRCxLQUFLLENBc0NFLEdBQUcsQ0FBQzs7Ozs7OztHQUNqQixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xuXG4vKiBnbG9iYWwgZGVzY3JpYmU6dHJ1ZSwgaXQ6dHJ1ZSwgYmVmb3JlOnRydWUsIGFmdGVyOnRydWUgKi9cblxuaW1wb3J0IHsgSldQcm94eSB9IGZyb20gJy4uLy4uJztcbmltcG9ydCBjcCBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgY2hyb21lZHJpdmVyIGZyb20gJ2Nocm9tZWRyaXZlcic7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgJ21vY2hhd2FpdCc7XG5cbmxldCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgncHJveHknLCAoKSA9PiB7XG4gIGxldCBjZFByb2MgPSBudWxsO1xuICBsZXQgaiA9IG5ldyBKV1Byb3h5KCk7XG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgY2RQcm9jID0gY3Auc3Bhd24oY2hyb21lZHJpdmVyLnBhdGgsIFsnLS11cmwtYmFzZT0vd2QvaHViJywgJy0tcG9ydD00NDQ0J10pO1xuICAgIGF3YWl0IHNsZWVwKDEwMDApO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBwcm94eSBzdGF0dXMgc3RyYWlnaHQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IFtyZXMsIHJlc0JvZHldID0gYXdhaXQgai5wcm94eSgnL3N0YXR1cycsICdHRVQnKTtcbiAgICByZXNCb2R5ID0gSlNPTi5wYXJzZShyZXNCb2R5KTtcbiAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICByZXNCb2R5LnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgcmVzQm9keS52YWx1ZS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYnVpbGQnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcHJveHkgc3RhdHVzIGFzIGNvbW1hbmQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJlcyA9IGF3YWl0IGouY29tbWFuZCgnL3N0YXR1cycsICdHRVQnKTtcbiAgICByZXMuc2hvdWxkLmhhdmUucHJvcGVydHkoJ2J1aWxkJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHN0YXJ0IGEgbmV3IHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGNhcHMgPSB7YnJvd3Nlck5hbWU6ICdjaHJvbWUnfTtcbiAgICBsZXQgcmVzID0gYXdhaXQgai5jb21tYW5kKCcvc2Vzc2lvbicsICdQT1NUJywge2Rlc2lyZWRDYXBhYmlsaXRpZXM6IGNhcHN9KTtcbiAgICByZXMuc2hvdWxkLmhhdmUucHJvcGVydHkoJ2Jyb3dzZXJOYW1lJyk7XG4gICAgai5zZXNzaW9uSWQuc2hvdWxkLmhhdmUubGVuZ3RoKDMyKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcXVpdCBhIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHJlcyA9IGF3YWl0IGouY29tbWFuZCgnJywgJ0RFTEVURScpO1xuICAgIHNob3VsZC5ub3QuZXhpc3QocmVzKTtcbiAgfSk7XG4gIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICBjZFByb2Mua2lsbCgpO1xuICAgIGF3YWl0IHNsZWVwKDUwMCk7XG4gIH0pO1xufSk7XG4iXX0=