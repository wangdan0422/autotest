'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.request = request;
function resFixture(url, method, json) {
  if (/\/status$/.test(url)) {
    return [200, { status: 0, value: { foo: 'bar' } }];
  }
  if (/\/element\/bad\/text$/.test(url)) {
    return [500, { status: 11, value: { message: 'Invisible element' } }];
  }
  if (/\/element\/200\/text$/.test(url)) {
    return [200, { status: 11, value: { message: 'Invisible element' } }];
  }
  if (/\/element\/200\/value$/.test(url)) {
    return [200, { status: 0, sessionId: 'innersessionid', value: 'foobar' }];
  }
  if (/\/session$/.test(url) && method === 'POST') {
    if (json.desiredCapabilities && json.desiredCapabilities.redirect) {
      return [303, 'http://localhost:4444/wd/hub/session/123'];
    } else {
      return [200, { status: 0, sessionId: '123', value: { browserName: 'boo' } }];
    }
  }
  if (/\/nochrome$/.test(url)) {
    return [100, { status: 0, value: { message: 'chrome not reachable' } }];
  }
  throw new Error('Can\'t handle url ' + url);
}

function request(opts, cb) {
  if (/badurl$/.test(opts.url)) {
    return cb(new Error('noworky'));
  }

  var response = {};
  var error = null;

  var _resFixture = resFixture(opts.url, opts.method, opts.json);

  var _resFixture2 = _slicedToArray(_resFixture, 2);

  var code = _resFixture2[0];
  var body = _resFixture2[1];

  response.statusCode = code;
  response.headers = { 'Content-type': 'application/json' };
  cb(error, response, body);
}
//# sourceMappingURL=data:application/json;base64,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anMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByZXNGaXh0dXJlICh1cmwsIG1ldGhvZCwganNvbikge1xuICBpZiAoL1xcL3N0YXR1cyQvLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBbMjAwLCB7c3RhdHVzOiAwLCB2YWx1ZToge2ZvbzogJ2Jhcid9fV07XG4gIH1cbiAgaWYgKC9cXC9lbGVtZW50XFwvYmFkXFwvdGV4dCQvLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBbNTAwLCB7c3RhdHVzOiAxMSwgdmFsdWU6IHttZXNzYWdlOiAnSW52aXNpYmxlIGVsZW1lbnQnfX1dO1xuICB9XG4gIGlmICgvXFwvZWxlbWVudFxcLzIwMFxcL3RleHQkLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gWzIwMCwge3N0YXR1czogMTEsIHZhbHVlOiB7bWVzc2FnZTogJ0ludmlzaWJsZSBlbGVtZW50J319XTtcbiAgfVxuICBpZiAoL1xcL2VsZW1lbnRcXC8yMDBcXC92YWx1ZSQvLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBbMjAwLCB7c3RhdHVzOiAwLCBzZXNzaW9uSWQ6ICdpbm5lcnNlc3Npb25pZCcsIHZhbHVlOiAnZm9vYmFyJ31dO1xuICB9XG4gIGlmICgvXFwvc2Vzc2lvbiQvLnRlc3QodXJsKSAmJiBtZXRob2QgPT09IFwiUE9TVFwiKSB7XG4gICAgaWYgKGpzb24uZGVzaXJlZENhcGFiaWxpdGllcyAmJiBqc29uLmRlc2lyZWRDYXBhYmlsaXRpZXMucmVkaXJlY3QpIHtcbiAgICAgIHJldHVybiBbMzAzLCAnaHR0cDovL2xvY2FsaG9zdDo0NDQ0L3dkL2h1Yi9zZXNzaW9uLzEyMyddO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gWzIwMCwge3N0YXR1czogMCwgc2Vzc2lvbklkOiAnMTIzJywgdmFsdWU6IHticm93c2VyTmFtZTogJ2Jvbyd9fV07XG4gICAgfVxuICB9XG4gIGlmICgvXFwvbm9jaHJvbWUkLy50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gWzEwMCwge3N0YXR1czogMCwgdmFsdWU6IHttZXNzYWdlOiAnY2hyb21lIG5vdCByZWFjaGFibGUnfX1dO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGhhbmRsZSB1cmwgXCIgKyB1cmwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWVzdCAob3B0cywgY2IpIHtcbiAgaWYgKC9iYWR1cmwkLy50ZXN0KG9wdHMudXJsKSkge1xuICAgIHJldHVybiBjYihuZXcgRXJyb3IoXCJub3dvcmt5XCIpKTtcbiAgfVxuXG4gIGxldCByZXNwb25zZSA9IHt9O1xuICBsZXQgZXJyb3IgPSBudWxsO1xuICBsZXQgW2NvZGUsIGJvZHldID0gcmVzRml4dHVyZShvcHRzLnVybCwgb3B0cy5tZXRob2QsIG9wdHMuanNvbik7XG4gIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSBjb2RlO1xuICByZXNwb25zZS5oZWFkZXJzID0geydDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9O1xuICBjYihlcnJvciwgcmVzcG9uc2UsIGJvZHkpO1xufVxuIl19