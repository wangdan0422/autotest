<?xml version="1.0" encoding="UTF-8"?>
<root ver="1.0">
<group name="协议关键字">
	<group name='XML操作'>
		<keyword id='xml_load_xml_file'>
			<name>加载XML文件</name>
			<comment>读取工程中指定的XML文件内容，将文件内容保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:loadXmlFile</implement>
			<show>1</show>
			<param id='path'>
				<name>文件路径</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>文件相对路径，以测试工程所在目录为根目录。格式举例：/template/create.xml</comment>
			</param>
			<param id='xml'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取的xml文件内容存入该变量并保存在上下文待引用。输入举例：var_value</comment>
			</param>
		</keyword>
		<keyword id='xml_copy'>
			<name>复制XML文件</name>
			<comment>复制源xml文件到目的xml文件</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:copyFile</implement>
			<show>1</show>
			<param id='srcPath'>
				<name>源文件路径</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>源文件绝对路径，格式举例：d:/template/create.xml</comment>
			</param>
			<param id='destPath'>
				<name>目的文件路径</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>目的文件绝对路径，格式举例：d:/template/create.xml</comment>
			</param>	
		</keyword>	
		<keyword id='xml_write'>
			<name>写入XML文件</name>
			<comment>将xml字符串写入并保存到目的xml文件</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:writeFile</implement>
			<show>1</show>
			<param id='xmlStr'>
				<name>xml字符串</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xml字符串</comment>
			</param>
			<param id='destPath'>
				<name>目的文件路径</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>目的文件绝对路径，格式举例：d:/template/create.xml</comment>
			</param>	
		</keyword>			
		<keyword id='xml_set_xml_value'>
			<name>修改XML元素内容</name>
			<comment>按照指定xpath查找元素，并修改该元素的内容，重新保存至输出变量中。</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:setXmlValue</implement>
			<show>1</show>
			<param id='xml'>
				<name>待修改变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的xml数据存入该变量并保存在上下文待引用。输入举例：var_value</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='value'>
				<name>待设置的修改内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待设置的修改内容，根据实际值填写。</comment>
			</param>		
		</keyword>
		<keyword id='xml_add_xml_value'>
			<name>增加XML元素节点</name>
			<comment>按照指定xpath查找元素，并在该元素下增加元素，重新保存至输出变量中。</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:addXmlElement</implement>
			<show>1</show>
			<param id='xml'>
				<name>待修改变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的xml数据存入该变量并保存在上下文待引用。输入举例：var_value</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='element'>
				<name>待增加元素名称</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待增加的元素，根据实际值填写。</comment>
			</param>
			<param id='value'>
				<name>待增加元素的值</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待增加元素的值，根据实际值填写。</comment>
			</param>		
		</keyword>
		<keyword id='xml_get_xml_value'>
			<name>获取XML元素内容</name>
			<comment>按照指定xpath查找元素，并获取该元素所有的值，分隔符分隔后保存至输出变量中。</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:getXmlValue</implement>
			<show>1</show>
			<param id='flag'>
				<name>xml类型</name>
				<default>string</default>
				<values></values>
				<required>T</required>
				<datapool>string\r\nfile</datapool>
				<comment>待操作的XML数据信息。</comment>
			</param>
			<param id='xml'>
				<name>XML文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的XML数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='value'>
				<name>属性值[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取XML元素的值存入该变量并保存在上下文待引用。输入举例：VAR_VALUE</comment>
			</param>
			<param id='separator'>
				<name>数据分隔符</name>
				<default>;</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>数据分隔符，输出值会以此分隔符来间隔数据。</comment>
			</param>
		</keyword>
		<keyword id='xml_verify_xml_value'>
			<name>校验XML元素内容</name>
			<comment>按照指定xpath查找所有符合定位的元素，根据分隔符校验元素内容</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:verifyXmlValue</implement>
			<show>1</show>
			<param id='xml'>
				<name>XML文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待校验的XML数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='text'>
				<name>预期文本</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期文本，请根据待指定的匹配模式输入</comment>
			</param>
			<param id='matched'>
				<name>预期结果</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期的匹配结果，若期望匹配成功，请选择true；若期望匹配失败，请选择false</comment>
			</param>
			<param id='mode'>
				<name>匹配模式</name>
				<default>精确匹配</default>
				<values>精确匹配\r\n模糊匹配\r\n正则表达式匹配</values>
				<required>T</required>
				<datapool></datapool>
				<comment>匹配模式，请根据实际需要选择。</comment>
			</param>
			<param id='separator'>
				<name>数据分隔符</name>
				<default>;</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>数据分隔符，输出值会以此分隔符来间隔数据。</comment>
			</param>
		</keyword>
		<keyword id='xml_verify_xml_Existed'>
			<name>校验XML元素存在性</name>
			<comment>判断给定的xpath元素节点是否存在，预期存在请选择true，预期不存在请选择false</comment>
			<implement>org.tn.qa.automation.keyword.XmlKeyword:verifyXmlIsExisted</implement>
			<show>1</show>
			<param id='xml'>
				<name>XML文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待校验的XML数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确xpath格式。在不确定节点具体路径时，请尽量使用//输入，如//ordNo</comment>
			</param>
			<param id='existed'>
				<name>预期结果</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期的存在结果，若期望存在，请选择true；若期望不存在，请选择false</comment>
			</param>
		</keyword>
	</group>
	<group name='JSON操作'>
		<keyword id='json_setAllJson'>
			<name>通过XPATH将返回参数的值传到请求参数</name>
			<comment></comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:setAllJson</implement>
			<show>1</show>
			<param id='json'>
				<name>上一个接口返回的JSON参数</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment></comment>
			</param>
			<param id='jsonrequest'>
				<name>请求的JSON参数</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment></comment>
			</param>
			<param id='value'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment></comment>
			</param>
		</keyword>	
		<keyword id='json_load_json_file'>
			<name>加载JSON文件</name>
			<comment>读取工程中指定的JSON文件内容，将文件内容保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:loadJSONFile</implement>
			<show>1</show>
			<param id='path'>
				<name>文件路径</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>文件相对路径，以测试工程所在目录为根目录。格式举例：/template/create.json</comment>
			</param>
			<param id='json'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取的json文件内容存入该变量并保存在上下文待引用。输入举例：var_value</comment>
			</param>
		</keyword>
		<keyword id='json_count'>
			<name>JSON数组相加</name>
			<comment>JSON数组相加</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:JsonCount</implement>
			<show>1</show>
			<param id='json'>
				<name>jsonArray</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment></comment>
			</param>
			<param id='value'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，输入举例：var_value</comment>
			</param>
		</keyword>		
		<keyword id='json_set_json_value'>
			<name>修改JSON元素内容</name>
			<comment>按照指定xpath查找元素，并修改该元素的内容，重新保存至输出变量中。目前不支持//查找</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:setJsonValue</implement>
			<show>1</show>
			<param id='json'>
				<name>待修改变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的json数据存入该变量并保存在上下文待引用。输入举例：var_value</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。目前不支持//查找</comment>
			</param>
			<param id='value'>
				<name>待设置的修改内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待设置的修改内容，根据实际值填写。</comment>
			</param>
			<param id='value_type'>
				<name>待增加元素值类型标识。</name>
				<default>true</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>true：string类型，false：JSON类型</comment>
			</param>		
		</keyword>
		<keyword id='json_copyAndSet_json_value'>
			<name>复制并批量修改JSON元素内容</name>
			<comment>按照指定xpath查找元素并复制元素到JSONArray里，并修改该元素的内容，重新保存至输出变量中。</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:copyAndSetJsonValue</implement>
			<show>1</show>
			<param id='json'>
				<name>待修改变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的json数据存入该变量并保存在上下文待引用。输入举例：var_value</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。目前不支持//查找</comment>
			</param>
			<param id='value'>
				<name>待设置的修改内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待设置的修改内容，为数组形式，如[1,2,3,4]。</comment>
			</param>		
		</keyword>
		<keyword id='json_get_json_value'>
			<name>获取JSON元素内容</name>
			<comment>按照指定xpath查找元素，并获取该元素的值，保存至输出变量中。目前不支持//查找</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:getJsonValue</implement>
			<show>1</show>
			<param id='json'>
				<name>JSON文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的JSON数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='value'>
				<name>属性值[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取XML元素的值存入该变量并保存在上下文待引用。输入举例：VAR_VALUE</comment>
			</param>
		</keyword>
		<keyword id='json_get_json_values'>
			<name>获取JSON元素list内容</name>
			<comment>按照指定xpath查找元素，并获取该元素的所有list值，保存至输出变量中。目前不支持//查找</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:getValuesByXpath</implement>
			<show>1</show>
			<param id='json'>
				<name>JSON文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的JSON数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='bracket'>
				<name>返回list是否包含中括号</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>true:包含；false：不包含</comment>
			</param>
			<param id='isRepeat'>
				<name>元素是否重复</name>
				<default>false</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>true:是；false：否，加入去重</comment>
			</param>
			<param id='value'>
				<name>属性值[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取XML元素的值存入该变量并保存在上下文待引用。输入举例：VAR_VALUE</comment>
			</param>
		</keyword>
		<keyword id='json_get_jsonvalue_bycondition'>
			<name>根据条件获取JSON元素内容</name>
			<comment>根据条件获取JSON元素内容</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:getValuesByElement</implement>
			<show>1</show>
			<param id='json'>
				<name>JSON文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的JSON数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='comparedKey'>
				<name>比较JSON元素节点</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>JSON的比较元素节点</comment>
			</param>
			<param id='expectedValue'>
				<name>JSON元素内容预期值</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期值</comment>
			</param>
			<param id='equalFlag'>
				<name>相等标志</name>
				<default></default>
				<values>等于\r\n不等于</values>
				<required>T</required>
				<datapool></datapool>
				<comment>comparedKey的实际元素内容与预期值对比。若相等，返回相等的元素节点；不相等，返回不相等的元素节点</comment>
			</param>
			<param id='values_out'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<comment>根据条件获取的JSON元素内容</comment>
			</param>
		</keyword>
		<keyword id='json_get_signjsonvalue_bycondition'>
			<name>根据条件获取单个JSON元素内容</name>
			<comment>根据条件获取单个JSON元素内容</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:getValueByElement</implement>
			<show>1</show>
			<param id='json'>
				<name>JSON文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的JSON数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='comparedKey'>
				<name>比较JSON元素节点</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>JSON的比较元素节点</comment>
			</param>
			<param id='expectedValue'>
				<name>JSON元素内容预期值</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期值</comment>
			</param>
			<param id='equalFlag'>
				<name>相等标志</name>
				<default></default>
				<values>等于\r\n不等于</values>
				<required>T</required>
				<datapool></datapool>
				<comment>comparedKey的实际元素内容与预期值对比。若相等，返回相等的元素节点；不相等，返回不相等的元素节点</comment>
			</param>
			<param id='value'>
				<name>属性值[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取XML元素的值存入该变量并保存在上下文待引用。输入举例：VAR_VALUE</comment>
			</param>
		</keyword>
		<keyword id='json_add_json_value'>
			<name>增加JSON元素节点</name>
			<comment>按照指定xpath查找元素，并在该元素下增加元素，重新保存至输出变量中。</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:addJsonElement</implement>
			<show>1</show>
			<param id='json'>
				<name>待修改变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的json数据存入该变量并保存在上下文待引用。输入举例：var_value</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。xpath最后一个key为待增加的元素</comment>
			</param>
			<param id='value'>
				<name>待增加元素的值</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待增加元素的值，根据实际值填写。</comment>
			</param>
			<param id='value_type'>
				<name>待增加元素值类型标识。</name>
				<default>false</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>true：string类型，false：JSON类型</comment>
			</param>		
		</keyword>
		<keyword id='json_get_json_element'>
			<name>获取JSON元素节点</name>
			<comment>按照指定xpath查找元素，根据条件获取单个或多个元素节点。单个元素直接保存至输出变量中，多个元素节点用分隔符分隔后保存至输出变量中。</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:getJsonElement</implement>
			<show>1</show>
			<param id='json'>
				<name>json文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的json数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='value'>
				<name>属性值[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取json元素的值存入该变量并保存在上下文待引用。输入举例：VAR_VALUE</comment>
			</param>
			<param id='condition'>
				<name>获取节点条件</name>
				<default>全部</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>全部：获取全部节点；数字：返回第n个节点，n从0开始计数</comment>
			</param>
			<param id='separator'>
				<name>数据分隔符</name>
				<default>;</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>数据分隔符，输出值会以此分隔符来间隔数据。</comment>
			</param>
		</keyword>
		<keyword id='json_get_jsonlist_length'>
			<name>获取数组长度</name>
			<comment>获取数组长度，入参可以是json或者非json对象</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:getJSONListLength</implement>
			<show>1</show>
			<param id='json'>
				<name>json文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的json数据信息。</comment>
			</param>
			<param id='count'>
				<name>数组长度[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取json元素的值存入该变量并保存在上下文待引用。输入举例：VAR_VALUE</comment>
			</param>
			<param id='isJson'>
				<name>是否为json元素</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>T：是；F：否</comment>
			</param>
		</keyword>
		<keyword id='json_verify_json_value'>
			<name>校验JSON元素内容</name>
			<comment>按照指定xpath查找元素，校验元素内容</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:verifyJsonValue</implement>
			<show>1</show>
			<param id='json'>
				<name>JSON文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待校验的JSON数据信息。</comment>
			</param>
			<param id='xpath'>
				<name>XPATH定位符</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>xpath格式定位符,请注意输入正确格式。</comment>
			</param>
			<param id='text'>
				<name>预期文本</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期文本，请根据待指定的匹配模式输入</comment>
			</param>
			<param id='matched'>
				<name>预期结果</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期的匹配结果，若期望匹配成功，请选择true；若期望匹配失败，请选择false</comment>
			</param>
		</keyword>
		<keyword id='json_verify_json_match'>
			<name>校验JSON数据1包含JSON数据2</name>
			<comment>校验json数据1包含json数据2</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:verifyJsonMatch</implement>
			<show>1</show>
			<param id='actual'>
				<name>集合大json数据</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>数据多json。</comment>
			</param>
			<param id='expect'>
				<name>集合小json数据</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>数据少json。</comment>
			</param>
			<param id='matched'>
				<name>预期结果</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期的匹配结果，若期望匹配成功，请选择true；若期望匹配失败，请选择false</comment>
			</param>
		</keyword>
		<keyword id='json_create_json_template'>
			<name>构造json的xpath模板</name>
			<comment>根据json原型，构建json的xpath模板；将json的值变成"//key"的格式</comment>
			<implement>org.tn.qa.automation.keyword.JSONKeyword:createTemplateXpath</implement>
			<show>1</show>
			<param id='json'>
				<name>JSON文本内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待操作的JSON数据信息。</comment>
			</param>
			<param id='value'>
				<name>属性值[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取XML元素的值存入该变量并保存在上下文待引用。输入举例：VAR_VALUE</comment>
			</param>
		</keyword>
	</group>
	<group name='HTTP协议'>
	    <keyword id='http_put'>
			<name>HTTP_PUT请求</name>
			<comment>发送HTTP PUT请求，默认超时时间为10秒，请求消息头，消息体可设置，响应成功后将响应消息保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:doPut</implement>
			<show>1</show>
			<param id='url'>
				<name>url地址</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待请求url地址</comment>
			</param>
			<param id='cookie'>
				<name>请求cookie</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待加入请求中的cookie</comment>
			</param>
			<param id='header'>
				<name>请求消息头</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>请求的消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='request'>
				<name>请求消息体</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输入请求的消息体内容</comment>
			</param>
			<param id='resp_code'>
				<name>响应消息码[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息码存入该变量并保存在上下文待引用。输入举例：VAR_RESP_CODE</comment>
			</param>
			<param id='resp_header'>
				<name>响应消息头[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息头存入该变量并保存在上下文待引用。输入举例：VAR_RESP_HEADER</comment>
			</param>
			<param id='timeout'>
				<name>响应超时时间（ms）</name>
				<default>30000</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应超时时间</comment>
			</param>
			<param id='resp_body'>
				<name>响应消息体[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息体内容存入该变量并保存在上下文待引用。输入举例：VAR_RESP_BODY</comment>
			</param>
		</keyword>
		<keyword id='http_post'>
			<name>HTTP_POST请求</name>
			<comment>发送HTTP POST请求，默认超时时间为10秒，请求消息头，消息体可设置，响应成功后将响应消息保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:doPost</implement>
			<show>1</show>
			<param id='url'>
				<name>url地址</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待请求url地址</comment>
			</param>
			<param id='is_form'>
				<name>是否表单请求</name>
				<default>F</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>T:为表单请求</comment>
			</param>
			<param id='cookie'>
				<name>请求cookie</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待加入请求中的cookie</comment>
			</param>
			<param id='header'>
				<name>请求消息头</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>请求的消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='request'>
				<name>请求消息体</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输入请求的消息体内容</comment>
			</param>
			<param id='resp_code'>
				<name>响应消息码[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息码存入该变量并保存在上下文待引用。输入举例：VAR_RESP_CODE</comment>
			</param>
			<param id='resp_header'>
				<name>响应消息头[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息头存入该变量并保存在上下文待引用。输入举例：VAR_RESP_HEADER</comment>
			</param>
			<param id='timeout'>
				<name>响应超时时间（ms）</name>
				<default>30000</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应超时时间</comment>
			</param>
			<param id='resp_body'>
				<name>响应消息体[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息体内容存入该变量并保存在上下文待引用。输入举例：VAR_RESP_BODY</comment>
			</param>
		</keyword>
		<keyword id='http_get'>
			<name>HTTP_GET请求</name>
			<comment>发送HTTP GET请求，默认超时时间为10秒，请求消息头，消息体可设置，响应成功后将响应消息保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:doGet</implement>
			<show>1</show>
			<param id='url'>
				<name>url地址</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待请求url地址</comment>
			</param>
		    <param id='cookie'>
				<name>请求cookie</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待加入请求中的cookie</comment>
			</param>
			<param id='header'>
				<name>请求消息头</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>请求的消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='request'>
				<name>请求消息体</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输入请求的消息体内容</comment>
			</param>
			<param id='resp_code'>
				<name>响应消息码[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息码存入该变量并保存在上下文待引用。输入举例：VAR_RESP_CODE</comment>
			</param>
			<param id='resp_header'>
				<name>响应消息头[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息头存入该变量并保存在上下文待引用。输入举例：VAR_RESP_HEADER</comment>
			</param>
			<param id='timeout'>
				<name>响应超时时间（ms）</name>
				<default>30000</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应超时时间</comment>
			</param>
			<param id='resp_body'>
				<name>响应消息体[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息体内容存入该变量并保存在上下文待引用。输入举例：VAR_RESP_BODY</comment>
			</param>
		</keyword>
		<keyword id='http_get_base64'>
			<name>HTTP_GET_base4加解密请求</name>
			<comment>发送HTTP GET请求，默认超时时间为10秒，请求消息头，消息体可设置，响应成功后将响应消息保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:doGetBase64</implement>
			<show>1</show>
			<param id='url'>
				<name>url地址</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待请求url地址</comment>
			</param>
		    <param id='cookie'>
				<name>请求cookie</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待加入请求中的cookie</comment>
			</param>
			<param id='header'>
				<name>请求消息头</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>请求的消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='string'>
				<name>http请求参数</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输入请求的消息体内容</comment>
			</param>
			<param id="resp_code">
				<name>响应消息码[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息码存入该变量并保存在上下文待引用。输入举例：VAR_RESP_CODE</comment>
			</param>
			<param id="resp_header">
				<name>响应消息头[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息头存入该变量并保存在上下文待引用。输入举例：VAR_RESP_HEADER</comment>
			</param>
			<param id='result'>
				<name>响应消息体[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息体内容存入该变量并保存在上下文待引用。输入举例：VAR_RESP_BODY</comment>
			</param>
			<param id='timeout'>
				<name>响应超时时间（ms）</name>
				<default>30000</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应超时时间</comment>
			</param>
		</keyword>
		<keyword id='http_post_base64'>
			<name>HTTP_POST_base4加解密请求</name>
			<comment>发送HTTP GET请求，默认超时时间为10秒，请求消息头，消息体可设置，响应成功后将响应消息保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:doPostBase64</implement>
			<show>1</show>
			<param id='url'>
				<name>url地址</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待请求url地址</comment>
			</param>
			<param id='is_form'>
				<name>是否表单请求</name>
				<default>F</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>T:为表单请求</comment>
			</param>
		    <param id='cookie'>
				<name>请求cookie</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待加入请求中的cookie</comment>
			</param>
			<param id='header'>
				<name>请求消息头</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>请求的消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='string'>
				<name>http请求参数</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输入请求的消息体内容</comment>
			</param>
			<param id="resp_code">
				<name>响应消息码[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息码存入该变量并保存在上下文待引用。输入举例：VAR_RESP_CODE</comment>
			</param><param id="resp_header">
				<name>响应消息头[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息头存入该变量并保存在上下文待引用。输入举例：VAR_RESP_HEADER</comment>
			</param><param id='result'>
				<name>响应消息体[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息体内容存入该变量并保存在上下文待引用。输入举例：VAR_RESP_BODY</comment>
			</param>
			<param id='timeout'>
				<name>响应超时时间（ms）</name>
				<default>30000</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应超时时间</comment>
			</param>
		</keyword>
		<keyword id='http_loop_request'>
			<name>HTTP_循环请求</name>
			<comment>发送HTTP请求，请求消息头，消息体可设置，响应成功后校验响应json参数，若校验不成功，继续执行http请求，直到超时。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:loopHttpVerify</implement>
			<show>1</show>
			<param id='url'>
				<name>url地址</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待请求url地址</comment>
			</param>
		    <param id='cookie'>
				<name>请求cookie</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待加入请求中的cookie</comment>
			</param>
			<param id='header'>
				<name>请求消息头</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>请求的消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='request'>
				<name>请求消息体</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输入请求的消息体内容</comment>
			</param>
			<param id='method'>
				<name>请求方法</name>
				<default>GET</default>
				<values>GET\r\nPOST</values>
				<required>T</required>
				<datapool></datapool>
				<comment>输入请求的消息体内容</comment>
			</param>
			<param id='paramBase64'>
				<name>请求参数是否base64加密</name>
				<default>false</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>请求参数是否base64加密</comment>
			</param>
			<param id='outBase64'>
				<name>响应参数是否base64解密</name>
				<default>false</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应参数是否base64解密</comment>
			</param>
			<param id='resp_code'>
				<name>响应消息码[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息码存入该变量并保存在上下文待引用。输入举例：VAR_RESP_CODE</comment>
			</param>
			<param id='resp_header'>
				<name>响应消息头[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息头存入该变量并保存在上下文待引用。输入举例：VAR_RESP_HEADER</comment>
			</param>
			<param id='timeout'>
				<name>响应超时时间（ms）</name>
				<default>30000</default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应超时时间</comment>
			</param>
			<param id='maxLoopTimeOut'>
				<name>请求超时时间（s）</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>请求超时时间</comment>
			</param>
			<param id='resp_body'>
				<name>响应消息体[OUT]</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>输出变量名称，将修改后的响应消息体内容存入该变量并保存在上下文待引用。输入举例：VAR_RESP_BODY</comment>
			</param>
			<param id='isJson'>
				<name>相应消息是否json格式</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>相应消息是否json格式，true:是；false:不是</comment>
			</param>
			<param id='xpath'>
				<name>响应消息体的xpath路径</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>响应消息体的xpath路径，如//success</comment>
			</param>
			<param id='expect'>
				<name>期望值</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>期望文本的值,除特例外均正常输入。特例：若期望文本为null，可输入String.Null;若期望文本为空字符串""，可输入String.Empty</comment>
			</param>
			<param id='matched'>
				<name>预期结果</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期的匹配结果，若期望匹配成功，请选择true；若期望匹配失败，请选择false</comment>
			</param>
			<param id='mode'>
				<name>匹配模式</name>
				<default>精确匹配</default>
				<values>精确匹配\r\n模糊匹配\r\n正则表达式匹配\r\n大于\r\n小于\r\n大于等于\r\n小于等于</values>
				<required>T</required>
				<datapool></datapool>
				<comment>匹配模式，请根据实际需要选择。</comment>
			</param>
		</keyword>
		<keyword id='http_add_header'>
			<name>添加头域</name>
			<comment>在指定头域信息中添加一个新的头域字段，并将修改后的头域保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:addHeader</implement>
			<show>1</show>
			<param id='header'>
				<name>原始头域内容</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>原始消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='key'>
				<name>头域名</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待添加头域名。输入举例：User-Agent</comment>
			</param>
			<param id='value'>
				<name>头域内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待添加头域内容。输入举例：firefox</comment>
			</param>
			<param id='reference'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，修改后的头域存入该变量并保存在上下文待引用。输入举例：VAR_HEADER</comment>
			</param>
		</keyword>
		<keyword id='http_remove_header'>
			<name>删除头域</name>
			<comment>在指定头域信息中删除一个新的头域字段，并将修改后的头域保存至输出变量。</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:removeHeader</implement>
			<show>1</show>
			<param id='header'>
				<name>原始头域内容</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>原始消息体头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='key'>
				<name>头域名</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待删除头域名。输入举例：User-Agent</comment>
			</param>
			<param id='reference'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，修改后的头域存入该变量并保存在上下文待引用。输入举例：VAR_HEADER</comment>
			</param>
		</keyword>
		<keyword id='http_verify_header'>
			<name>校验头域</name>
			<comment>校验返回的头域内容</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:verifyHeader</implement>
			<show>1</show>
			<param id='header'>
				<name>返回的头域内容</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>返回的头域信息。输入举例：User-Agent: firefox\r\nAccept: xml</comment>
			</param>
			<param id='key'>
				<name>头域名</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待校验头域名。输入举例：User-Agent</comment>
			</param>
			<param id='text'>
				<name>期望值</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待校验头域的期望值。输入举例：firefox</comment>
			</param>
			<param id='matched'>
				<name>预期结果</name>
				<default>true</default>
				<values>true\r\nfalse</values>
				<required>T</required>
				<datapool></datapool>
				<comment>预期的匹配结果，若期望匹配成功，请选择true；若期望匹配失败，请选择false</comment>
			</param>
			<param id='mode'>
				<name>匹配模式</name>
				<default>精确匹配</default>
				<values>精确匹配\r\n模糊匹配\r\n正则表达式匹配</values>
				<required>T</required>
				<datapool></datapool>
				<comment>匹配模式，请根据实际需要选择。</comment>
			</param>
		</keyword>
		<keyword id='http_add_cookie'>
			<name>添加cookie</name>
			<comment>根据输入的cookie属性，添加cookie。此方法输出变量常放至HTTP post/get方法中</comment>
			<implement>org.tn.qa.automation.keyword.HttpKeyword:addCookie</implement>
			<show>1</show>
			<param id='pre_cookie'>
				<name>原cookie集合</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>原cookie集合，向集合中添加多个cookie时使用，请输入之前使用此keyword添加的cookie变量，如${VAR_Cookie}。仅添加一个可不填写</comment>
			</param>
			<param id='name'>
				<name>cookie名</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待添加的cookie的name属性值。</comment>
			</param>
			<param id='value'>
				<name>cookie值</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>待添加的cookie的value属性值</comment>
			</param>
			<param id='domain'>
				<name>cookie域</name>
				<default></default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待添加cookie的适用的域名。注意域名必须以点开始（例如.yesky.com）</comment>
			</param>
			<param id='path'>
				<name>cookie路径</name>
				<default>/</default>
				<values></values>
				<required>F</required>
				<datapool></datapool>
				<comment>待添加cookie的适用的路径。</comment>
			</param>
			<param id='secure'>
				<name>是否加密发送</name>
				<default>false</default>
				<values>false\r\ntrue</values>
				<required>T</required>
				<datapool></datapool>
				<comment>待添加cookie的secure属性值。true表示浏览器通过安全协议发送cookies；false表示浏览器使用标准协议</comment>
			</param>
			<param id='cookie'>
				<name>输出变量名称[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将添加的cookie以对象BasicClientCookie形式保存在上下文该变量中。输入举例：VAR_Cookie</comment>
			</param>
		</keyword>
	</group>	
	<group name='Hessian操作'>
			<keyword id='verifyHessianField'>
			<name>校验Hessian消息体</name>
			<comment>校验接收到的Hessian响应消息体，以map（key和value）形式比对，默认实际文本包含预期文本即比对通过</comment>
			<implement>org.tn.qa.automation.keyword.HessianKeyword:verifyHessianField</implement>
			<show>1</show>
			<param id='text'>
				<name>实际文本</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>实际的Hessian消息文本内容，多个字段以逗号隔开格式如：accountNo=111,userId=222,userName=aaa</comment>
			</param>
			<param id='expect'>
				<name>期望文本</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>期望的Hessian消息文本内容，多个字段以逗号隔开格式如：accountNo=111,userId=222,userName=aaa</comment>
			</param>
			<param id='mode'>
				<name>匹配模式</name>
				<default>模糊匹配</default>
				<values>精确匹配\r\n模糊匹配</values>
				<required>T</required>
				<datapool></datapool>
				<comment>匹配模式，请根据实际需要选择，模糊匹配即实际文本中包含预期文本中的key和value。</comment>
			</param>
		</keyword>
			<keyword id='getHessianField'>
			<name>获取Hessian消息字段</name>
			<comment>根据字段名获取字段值保存在输出变量中。</comment>
			<implement>org.tn.qa.automation.keyword.HessianKeyword:getHessianField</implement>
			<show>1</show>
			<param id='text'>
				<name>实际文本</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>实际的Hessian消息文本内容，多个字段以逗号隔开格式如：accountNo=111,userId=222,userName=aaa</comment>
			</param>
			<param id='fieldName'>
				<name>字段名</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>Hessian消息字段名。</comment>
			</param>
			<param id='varFieldValue'>
				<name>字段值[OUT]</name>
				<default></default>
				<values></values>
				<required>T</required>
				<datapool></datapool>
				<comment>输出变量名称，将获取字段值存入该变量并保存在上下文待引用。输入举例：varFieldValue</comment>
			</param>
		</keyword>
	</group>

</group>
</root>